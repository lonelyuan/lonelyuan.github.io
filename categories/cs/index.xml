<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CS on lonelyuan's Blog</title><link>https://lonelyuan.github.io/HugoBlog/categories/cs/</link><description>Recent content in CS on lonelyuan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 28 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://lonelyuan.github.io/HugoBlog/categories/cs/index.xml" rel="self" type="application/rss+xml"/><item><title>CSAPP - Proxylab</title><link>https://lonelyuan.github.io/HugoBlog/p/csapp-proxylab/</link><pubDate>Thu, 05 Oct 2023 00:00:03 +0000</pubDate><guid>https://lonelyuan.github.io/HugoBlog/p/csapp-proxylab/</guid><description>&lt;p>挂梯子每个人都玩过，但你知道梯子的原理吗。最后一个lab，实现一个HTTP代理服务器。本实验难度相对前面两个lab有所下降，但综合性比较强，涉及教材最后三章的所有内容以及malloc和cache两个lab。&lt;/p>
&lt;h2 id="项目结构">项目结构&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|-- csapp.c /*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|-- csapp.h * 这三个文件是项目主体，可以随意修改
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|-- proxy.c */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|-- driver.sh # 测评脚本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|-- free-port.sh /*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|-- nop-server.py * 工具脚本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|-- port-for-user.pl */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">`-- tiny
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |-- cgi-bin/ # 动态程序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |-- static/ # 静态文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |-- csapp.c /*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |-- csapp.h * 课本中提到的tiny实现，建议详细阅读
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `-- tiny.c */
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="csappc">csapp.c&lt;/h3>
&lt;p>&lt;code>csapp.c&lt;/code>和&lt;code>csapp.h&lt;/code>是课本后三章提到的函数代码实例，包括以下几组函数实现：&lt;/p>
&lt;ul>
&lt;li>进程控制：&lt;code>Fork()&lt;/code>,&lt;code>Execve()&lt;/code>,&lt;code>Wait()&lt;/code>,&lt;code>Kill()&lt;/code>,&lt;code>Sleep()&lt;/code>,&lt;code>Pause()&lt;/code>&amp;hellip;&lt;/li>
&lt;li>信号控制：&lt;code>Signal()&lt;/code>,&lt;code>Sigprocmask()&lt;/code>,&lt;code>Sig***set()&lt;/code>&lt;/li>
&lt;li>I/O操作：&lt;code>Open()&lt;/code>,&lt;code>Read()&lt;/code>,&lt;code>Write()&lt;/code>,&lt;code>Lseek()&lt;/code>,&lt;code>Close()&lt;/code>&amp;hellip;
&lt;ul>
&lt;li>Signal-safe I/O&lt;/li>
&lt;li>Standard I/O&lt;/li>
&lt;li>Robust I/O&lt;/li>
&lt;li>目录操作：&lt;code>Opendir()&lt;/code>,&lt;code>Readdir()&lt;/code>,&lt;code>Closedir()&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>动态内存分配：&lt;code>Malloc()&lt;/code>,&lt;code>Realloc()&lt;/code>,&lt;code>Calloc()&lt;/code>,&lt;code>Free()&lt;/code>
&lt;ul>
&lt;li>内存映射：&lt;code>Mmap()&lt;/code>,&lt;code>Nunmap()&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Socket接口：&lt;code>Socket()&lt;/code>,&lt;code>Bind()&lt;/code>,&lt;code>Listen()&lt;/code>,&lt;code>Accept()&lt;/code>,&lt;code>Connect()&lt;/code>
&lt;ul>
&lt;li>网络信息：&lt;code>Getaddrinfo()&lt;/code>,&lt;code>Gethostbyname()&lt;/code>,&lt;code>Inet_ntop()&lt;/code>&amp;hellip;&lt;/li>
&lt;li>可重入接口：&lt;code>Open_clientfd()&lt;/code>,&lt;code>Open_listenfd()&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pthreads多线程：&lt;code>create()&lt;/code>,&lt;code>join()&lt;/code>,&lt;code>cancel()&lt;/code>,&lt;code>detach()&lt;/code>,&lt;code>exit()&lt;/code>,&lt;code>self()&lt;/code>,&lt;code>once()&lt;/code>&lt;/li>
&lt;li>POSIX信号量：&lt;code>Sem_init()&lt;/code>,&lt;code>P()&lt;/code>,&lt;code>V()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>这也太多了8。实际上这些都是系统函数的封装，我们并不需要用到所有函数。可以看到，本实验将后三章讲述的内容全部抛出，让我们自己思考并选用这些工具来完成目标。当然，也可以随意修改这些封装或者直接使用系统接口。&lt;/p>
&lt;h3 id="tinyc">tiny.c&lt;/h3>
&lt;p>此外，tiny目录下也有相同的&lt;code>csapp.c&lt;/code>和&lt;code>csapp.h&lt;/code>，而&lt;code>tiny.c&lt;/code>是课本上提到的简易web服务器实现，于是我们可以将其作为proxy的初始代码框架。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">listenfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">connfd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">hostname&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">socklen_t&lt;/span> &lt;span class="n">clientlen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">sockaddr_storage&lt;/span> &lt;span class="n">clientaddr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">listenfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">Open_listenfd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">clientlen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clientaddr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">connfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">Accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listenfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">SA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">clientaddr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">clientlen&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Getnameinfo&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">SA&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">clientaddr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">clientlen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">hostname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Accepted from (%s, %s)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">hostname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">doit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">connfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">connfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Socket接口是一切网络程序的底层，有关socket模型请随便搜索那一张流程图并熟记于心（或者参考&lt;a class="link" href="https://lonelyuan.github.io/p/%E4%BB%8Escapy%E5%92%8Cwireshark%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#guidelines" target="_blank" rel="noopener"
>👴的文章&lt;/a>）。这里简单总结一下要点：&lt;/p>
&lt;ul>
&lt;li>地址标记主机，端口标记进程。&lt;/li>
&lt;li>客户端执行&lt;code>Connect()&lt;/code>，服务器执行&lt;code>Bind()&lt;/code>,&lt;code>Listen()&lt;/code>,&lt;code>Accept()&lt;/code>。&lt;/li>
&lt;li>unix系统中一切皆文件，打开的文件通过文件描述符fd标记。&lt;/li>
&lt;li>网络连接也是一种特殊的文件，即&lt;code>Socket()&lt;/code>也返回一个fd。&lt;/li>
&lt;li>于是对该fd使用传统I/O函数即可进行通信内容的读写。本质上就是读写Socket提供的缓冲区&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>于是服务器需要维护&lt;code>listenfd&lt;/code>,&lt;code>connfd&lt;/code>两个fd分别代表监听端口和客户端端口。
而服务器是一个需要长久运行的程序，因此他的核心进程往往运行着一个死循环，也称为主事件循环。
在循环中服务器不断接受着客户端的请求，于是&lt;code>connfd&lt;/code>在循环中不断地创建和销毁，而&lt;code>listenfd&lt;/code>保持不变。
而具体到单个请求的处理，tiny将其交给了&lt;code>doit()&lt;/code>函数。其功能分为以下几步：&lt;/p>
&lt;ul>
&lt;li>从缓冲区中读取HTTP报文
&lt;ul>
&lt;li>tiny只针对GET请求做出响应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>读第一行，判断HTTP方法&lt;/li>
&lt;li>读取处理剩余的HTTP首部&lt;/li>
&lt;li>判断请求的是静态文件还是动态程序（cgi-bin）
&lt;ul>
&lt;li>静态请求，读取文件内容&lt;/li>
&lt;li>动态请求，调用cgi程序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>此外，面对错误情况要返回相应的状态码，而服务器进程不能结束。&lt;/li>
&lt;/ul>
&lt;h3 id="得分点">&lt;strong>得分点&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>BasicCorrectness: 40 （基本代理）&lt;/li>
&lt;li>Concurrency: 15 （并发性）&lt;/li>
&lt;li>Cache: 15 （使用缓存）&lt;/li>
&lt;/ul>
&lt;h2 id="part1-basic-proxy">Part1: Basic Proxy&lt;/h2>
&lt;p>proxy在client面前扮演服务器，在server面前扮演客户端。也就是说在proxy中需要同时实现这两个功能，而tiny已经有了服务器端的实现，故而只需要考虑客户端的实现即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> ┌──────┐ (2) ┌─────┐ (1) ┌──────┐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │◄──────┤ │◄───────┤ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │Server│ (3) │Proxy│ (4) │Client│
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├──────►│ ├───────►│ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └──────┘ └─────┘ └──────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>具体来说，只需要修改doit函数。首先建立最简单的模型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// v0.1: score 16/40
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">doit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">cfd&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (1) client -&amp;gt; proxy */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read_req&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (2) proxy -&amp;gt; server */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">Open_clientfd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_writen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (3) server -&amp;gt; proxy */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read_res&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (4) proxy -&amp;gt; client */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_writen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>read_req()&lt;/code>和&lt;code>read_res()&lt;/code>封装了从Rio缓冲区读取报文的细节。下面详细介绍：&lt;/p>
&lt;h3 id="在client面前扮演server">在client面前扮演server&lt;/h3>
&lt;p>对于请求报文，首先需要解析出地址和端口以便找到目的服务器，其次需要注意&lt;code>curl --proxy&lt;/code>的第一行发包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">GET http://localhost:81/ HTTP/1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里路径变成了服务器的完整地址，直接丢给tiny是会报404的。因此，👴直接对第一行提取host,port,path。（注意分清&lt;code>sscanf()&lt;/code>和&lt;code>sprintf()&lt;/code>）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">read_req&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">rio_t&lt;/span> &lt;span class="n">rio&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_readinitb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rio&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXBUF&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">host_port_path&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">host_port&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">path_line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Receive: &amp;#34;GET http://host:port/path HTTP/1.1&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">Rio_readlineb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rio&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sscanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;GET %s HTTP/1.1&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host_port_path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sscanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host_port_path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;http://%[^/]%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host_port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">sscanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host_port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%[^:]:%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;80&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Send: &amp;#34;GET /path HTTP/1.1&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path_line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;GET %s HTTP/1.1&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">strcat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path_line&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_readlineb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rio&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">strcat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="在server面前扮演client">在server面前扮演client&lt;/h3>
&lt;p>对于响应报文，则需要考虑包体长度问题。代码中设置了&lt;code>MAXBUF&lt;/code>常量为8192，在测评脚本中有几个样例是远超过这个数字的。因此需要考虑流式传输，一边接受一边发送。于是&lt;code>doit()&lt;/code>也需要进行修改&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// v0.2: score 40/40
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">doit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">cfd&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">res_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXBUF&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (1) client -&amp;gt; proxy */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read_req&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (2) proxy -&amp;gt; server */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">Open_clientfd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_writen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (3) server -&amp;gt; proxy */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">Rio_readn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res_buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span> &lt;span class="n">res_buf&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (4) proxy -&amp;gt; client */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_writen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res_buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="part2-concurrency">Part2: Concurrency&lt;/h2>
&lt;p>在并发性测试中，测评脚本会调用&lt;code>nop-server.py&lt;/code>，其核心逻辑如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">serversocket&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">details&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">serversocket&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">accept&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，nop-server在接受请求之后会进入死循环，也就是说连接被永远阻塞了。这要求proxy能够同时接受多个连接。Pthread库的多线程接口较为简单，只需要将主事件循环中插入&lt;code>Pthread_create()&lt;/code>，而&lt;code>doit()&lt;/code>则被封装进线程的入口函数中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">Pthread_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">connfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Pthread_detach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">pthread_self&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 设置为可分离状态，自动回收资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">doit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="part3-cache">Part3: Cache&lt;/h2>
&lt;p>在缓存测试中，测评脚本会在执行过一定的请求之后杀死tiny服务器，要求服务器对之前的请求进行保存。结合上一步的多线程，这里便存在着并发读写的问题。&lt;/p>
&lt;p>而缓存的实现细节有非常多可说的部分，这里首先抽象出接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">doit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">cfd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (1) client -&amp;gt; proxy */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read_req&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (1.1) proxy -&amp;gt; cache */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">read_cache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (1.2) cache -&amp;gt; client */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_writen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (2) proxy -&amp;gt; server */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">Open_clientfd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_writen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (3) server -&amp;gt; proxy */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXBUF&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAX_CACHE_SIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">Rio_readn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (4) proxy -&amp;gt; client */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Rio_writen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">strncat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* (4.1) proxy -&amp;gt; cache */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">write_cache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>具体到缓存设计这里可以自由发挥。如果面向评测脚本编程，只需要缓存容量为3，连缓存删除的策略都不用实现。不过考试就考这个LRU、OPT啥的，还是得理解一下。下面是基于循环链表的LRU策略实现：&lt;/p>
&lt;ul>
&lt;li>数据结构&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">CacheEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">tail&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">pthread_mutex_t&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Cache&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>初始化&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Cache&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">createCache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Cache&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">cache&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Cache&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Cache&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>读缓存&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">read_cache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Cache&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 查找是否存在相同的 key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">current&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>写缓存&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">write_cache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Cache&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 初始化Entry
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CacheEntry&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">strdup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">strdup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 查找是否已存在相同的 key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">current&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">// 更新值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">strdup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 插入新节点到链表头部
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">head&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">tail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">head&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果超过容量限制，删除尾部节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">tail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">tail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tail&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>评价：最后一个实验满分的要求还是很低的。由于c语言编程实在繁琐，👴这个实验追求的是满分基础下的代码极简主义。如果想学到跟多可以自己增加要求，如：&lt;/p>
&lt;ul>
&lt;li>tiny仅支持GET——增加对不同HTTP方法的支持&lt;/li>
&lt;li>支持对长报文分块(chunk)的处理&lt;/li>
&lt;li>增强并发性能，使用信号量代替互斥锁，使用线程池等等&lt;/li>
&lt;li>增强缓存性能，使用哈希表等高效数据结构&lt;/li>
&lt;/ul>
&lt;p>实际上，生产级代理服务器考虑的远比这些复杂。路由规则，加密协议等等&lt;/p></description></item><item><title>MOSPI-ChCore lab (1)</title><link>https://lonelyuan.github.io/HugoBlog/p/mospi-chcore-lab-1/</link><pubDate>Fri, 29 Oct 2021 17:03:14 +0000</pubDate><guid>https://lonelyuan.github.io/HugoBlog/p/mospi-chcore-lab-1/</guid><description>&lt;p>由于👴觉得👴学校的操作系统讲了个🔨，慕名而来学习上交的 MOSPI 课程。银杏书看完之后👴发现👴学校的OS确实讲了个🔨。我直接当场来一段圣经吟唱：&lt;/p>
&lt;p>那个额西电操作系统嗷，不会写教材可以不写，害特么在弄你那个管程，来我教你啊，看好了啊。首先 M.A.L.H. 原则，看懂了吗，然后开讲&lt;strong>虚拟内存&lt;/strong>，哎我就不虚拟，我就讲那个空闲链表。哎，再扎个&lt;strong>多线程&lt;/strong>，看到没，线程上下文切换了。我特么直接三段&lt;strong>系统调度&lt;/strong>（短期，中期，长期），然后我直接~就一个多核调度，我就调度到&lt;strong>IPC&lt;/strong>，进程现在已经可以通信了啊！别怪我没有教好你，进程通信了之后干什么，憋特么讲你那破几把处理机了。看好啊，讲出锁（嬉皮笑脸），讲出&lt;strong>信号量&lt;/strong>直接就扔到互斥资源身上，就疯狂的进入他的临界区。然后我再一个，&lt;strong>文件系统&lt;/strong>！加三段系统&lt;strong>虚拟化&lt;/strong>（CPU虚拟化、内存虚拟化、IO虚拟化），全部吃满，完成强杀，你唛璧你懂个der，讲寄吧OS，我爱你。&lt;/p>
&lt;p>&lt;em>圣经原文：&lt;/em>&lt;a class="link" href="https://www.bilibili.com/video/BV1Jf4y1L7EZ" target="_blank" rel="noopener"
>拖更云的鹰佐教学&lt;/a>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>本系列为 ChCore lab 实验报告。
Lab源码：https://gitee.com/ipads-lab/chcore-lab
MOSPI在线网站：https://ipads.se.sjtu.edu.cn/mospi/&lt;/p>
&lt;/blockquote>
&lt;h2 id="实验环境">实验环境&lt;/h2>
&lt;p>需要docker和qemu，docker不赘述。linux下安装qemu：
&lt;code>sudo apt-get install qemu-system-arm&lt;/code>
安装完成之后查看版本号：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ qemu-system-aarch64 --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">QEMU emulator version 4.2.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>5个实验在源码仓库分别以5个分支存在。 git clone -b即可。&lt;/p>
&lt;p>内核构建和调试：&lt;/p>
&lt;ul>
&lt;li>用docker交叉编译内核：&lt;code>make build&lt;/code>&lt;/li>
&lt;li>启动qemu：&lt;code>make qemu&lt;/code>
&lt;ul>
&lt;li>这里遇到报错：&lt;code> Unable to init server: Could not connect: Connection refused gtk initialization failed&lt;/code>&lt;/li>
&lt;li>解决方法：修改 Makefile ，在&lt;code>QEMUOPTS&lt;/code>参数后加&lt;code>-nographic&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动qemu：&lt;code>make qemu-gdb&lt;/code>
&lt;ul>
&lt;li>将监听1234端口以供gdb远程调用&lt;/li>
&lt;li>退出：&lt;code>ctrl+a&lt;/code>，然后按x。&lt;/li>
&lt;li>如果意外退出，要杀死进程：&lt;code>kill $(ps -ef | grep qemu | grep 1234 | awk '{print $2}')&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在另一个终端启动gdb调试：&lt;code>make gdb&lt;/code>
&lt;ul>
&lt;li>这里可能需要安装gdb-multiarch：&lt;code>sudo apt-get install gdb-multiarch&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>可以看到，本项目中 Makefile 主要是封装了一些命令。&lt;/p>
&lt;hr>
&lt;h2 id="lab1">Lab1&lt;/h2>
&lt;h3 id="练习3-加载入口定义">练习3-加载入口定义&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">root@lastyear:~/chcore-lab# readelf -S build/kernel.img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">There are &lt;span class="m">9&lt;/span> section headers, starting at offset 0x20cd8:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Section Headers:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span>Nr&lt;span class="o">]&lt;/span> Name Type Address Offset
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Size EntSize Flags Link Info Align
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 0&lt;span class="o">]&lt;/span> NULL &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">00000000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 1&lt;span class="o">]&lt;/span> init PROGBITS &lt;span class="m">0000000000080000&lt;/span> &lt;span class="m">00010000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000000000000b5b0 &lt;span class="m">0000000000000008&lt;/span> WAX &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 2&lt;span class="o">]&lt;/span> .text PROGBITS ffffff000008c000 0001c000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 00000000000011dc &lt;span class="m">0000000000000000&lt;/span> AX &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 3&lt;span class="o">]&lt;/span> .rodata PROGBITS ffffff0000090000 &lt;span class="m">00020000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 00000000000000f8 &lt;span class="m">0000000000000001&lt;/span> AMS &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 4&lt;span class="o">]&lt;/span> .bss NOBITS ffffff0000090100 000200f8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0000000000008000&lt;/span> &lt;span class="m">0000000000000000&lt;/span> WA &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">16&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 5&lt;span class="o">]&lt;/span> .comment PROGBITS &lt;span class="m">0000000000000000&lt;/span> 000200f8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0000000000000032&lt;/span> &lt;span class="m">0000000000000001&lt;/span> MS &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 6&lt;span class="o">]&lt;/span> .symtab SYMTAB &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">00020130&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0000000000000858&lt;/span> &lt;span class="m">0000000000000018&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">46&lt;/span> &lt;span class="m">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 7&lt;span class="o">]&lt;/span> .strtab STRTAB &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">00020988&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000000000000030f &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 8&lt;span class="o">]&lt;/span> .shstrtab STRTAB &lt;span class="m">0000000000000000&lt;/span> 00020c97
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000000000000003c &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到init段的起始地址是&lt;code>0x80000&lt;/code>，和&lt;code>readelf -h&lt;/code>中的 Entry point address 一致，也和 GDB 刚进入时&lt;code>where&lt;/code>的输出一致。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">0x0000000000080000 in ?? &lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> where
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#0 0x0000000000080000 in _start ()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面寻找&lt;code>_start&lt;/code>的定义，在&lt;code>CMakeLists.txt&lt;/code>中找到&lt;code>_start&lt;/code>，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">set_property&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TARGET kernel.img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> APPEND_STRING
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PROPERTY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LINK_FLAGS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-T &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">CMAKE_CURRENT_BINARY_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">link_script&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> -e _start&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里为&lt;code>kernel.img&lt;/code>指定了链接器脚本(-T)和入口函数(-e)。&lt;/p>
&lt;p>于是跟随link_script：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">set&lt;span class="o">(&lt;/span>link_script &lt;span class="s2">&amp;#34;linker.lds&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">configure_file&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;./scripts/linker-aarch64.lds.in&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;linker.lds.S&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进入脚本linker-aarch64.lds.in：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;../boot/image.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SECTIONS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TEXT_OFFSET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">init&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">init_object&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>init&lt;/code>段指定了加载&lt;code>init_object&lt;/code>，它表示bootloader的所有目标文件集合。其定义回到&lt;code>CmakeLists.txt&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">set&lt;span class="o">(&lt;/span>init_object
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/start.S.o
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/mmu.c.o
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/tools.S.o
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/init_c.c.o
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/uart.c.o&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可发现&lt;code>/boot/start.S&lt;/code>定义了&lt;code>_start&lt;/code>。&lt;/p>
&lt;p>下面继续寻找地址，在链接器脚本引用了&lt;code>image.h&lt;/code>，其中有&lt;code>TEXT_OFFSET&lt;/code>的定义：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SZ_16K 0x4000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SZ_64K 0x10000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define KERNEL_VADDR 0xffffff0000000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define TEXT_OFFSET 0x80000
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一切终于串起来了：&lt;/p>
&lt;ul>
&lt;li>&lt;code>CMakeLists.txt&lt;/code>：是CMake的脚本文件。 CMake 是跨平台的C/C++建构工具。
&lt;ul>
&lt;li>作用：
&lt;ul>
&lt;li>指定源文件集合&lt;code>init_object&lt;/code>&lt;/li>
&lt;li>定义链接器脚本&lt;code>link_script&lt;/code>&lt;/li>
&lt;li>指定入口函数&lt;code>_start&lt;/code>并指定链接器脚本&lt;/li>
&lt;li>最终生成&lt;code>kernel.img&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>//最近看到的挺好的CMake教程：https://www.bilibili.com/video/BV1rR4y1E7n9&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>linker-aarch64.lds.in&lt;/code>：lds是链接器脚本文件，负责控制输出的ELF文件的细节。
&lt;ul>
&lt;li>作用：指定了起始地址&lt;code>0x80000&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="练习3-多处理器挂起">练习3-多处理器挂起&lt;/h3>
&lt;p>&lt;code>start.S&lt;/code>中注释的很明白了，通过检查&lt;code>mpidr_el1&lt;/code>寄存器来判断 cpuid ，如果不是0则进入死循环。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">BEGIN_FUNC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_start&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mrs&lt;/span> &lt;span class="n">x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mpidr_el1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">and&lt;/span> &lt;span class="n">x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0xFF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cbz&lt;/span> &lt;span class="n">x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* hang all secondary processors before we intorduce multi-processors */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">secondary_hang&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bl&lt;/span> &lt;span class="n">secondary_hang&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">primary&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Turn to el1 from other exception levels. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bl&lt;/span> &lt;span class="n">arm64_elX_to_el1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Prepare stack pointer and jump to C. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adr&lt;/span> &lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">boot_cpu_stack&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">add&lt;/span> &lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0x1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mov&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bl&lt;/span> &lt;span class="n">init_c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Should never be here */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">END_FUNC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_start&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="练习4-lma和vma">练习4-LMA和VMA&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">root@lastyear:~/chcore-lab# objdump -h build/kernel.img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">build/kernel.img: file format elf64-little
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Sections:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Idx Name Size VMA LMA File off Algn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> init 0000b5b0 &lt;span class="m">0000000000080000&lt;/span> &lt;span class="m">0000000000080000&lt;/span> &lt;span class="m">00010000&lt;/span> 2**12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CONTENTS, ALLOC, LOAD, CODE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> .text 000011dc ffffff000008c000 000000000008c000 0001c000 2**3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CONTENTS, ALLOC, LOAD, READONLY, CODE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">2&lt;/span> .rodata 000000f8 ffffff0000090000 &lt;span class="m">0000000000090000&lt;/span> &lt;span class="m">00020000&lt;/span> 2**3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CONTENTS, ALLOC, LOAD, READONLY, DATA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">3&lt;/span> .bss &lt;span class="m">00008000&lt;/span> ffffff0000090100 &lt;span class="m">0000000000090100&lt;/span> 000200f8 2**4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ALLOC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">4&lt;/span> .comment &lt;span class="m">00000032&lt;/span> &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0000000000000000&lt;/span> 000200f8 2**0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CONTENTS, READONLY
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现只有init段的VMA和LMA相同。其赋值还是回到lds脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">SECTIONS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TEXT_OFFSET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">init&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//init段VMA==VMA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">init_object&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SZ_16K&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 对齐16k
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">init_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ABSOLUTE&lt;/span>&lt;span class="p">(.);&lt;/span> &lt;span class="c1">// init段结束
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// KERNEL_VADDR在image.h定义为0xffffff0000000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nl">init_end&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nf">AT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">init_end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// AT指定LMA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="c1">// .text段：VMA = KERNEL_VADDR + init_end; LMA = init_end
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 后面的段，全部按顺序对齐并递增，此时VMA和LMA已经不同，故后面的段也全都不同
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SZ_64K&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">data&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SZ_64K&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">rodata&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">rodata&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_edata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 这些外部变量指的是LMA，则减去虚拟地址头
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_bss_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">bss&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">bss&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_bss_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SZ_64K&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>回答问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>为什么LMA和VMA不同&lt;/p>
&lt;ul>
&lt;li>VMA是对应虚拟内存的地址，但在内核启动时还处于物理地址模式，VMA可能超出物理内存范围。所以只能先加载，再映射到虚拟地址。&lt;/li>
&lt;li>为什么内核段的VMA要映射到高位，应该是一种惯例。&lt;/li>
&lt;li>为什么bootloader不用VMA，因为他负责初始化页表，他不能用，也没有必要。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>LMA到VMA在何时转换&lt;/p>
&lt;ul>
&lt;li>由上一问可知，页表初始化之后便可转换为VMA。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="练习5-c语言进制转换">练习5-c语言进制转换&lt;/h3>
&lt;p>从后往前取余即可。&lt;/p>
&lt;h3 id="练习6-函数栈">练习6-函数栈&lt;/h3>
&lt;p>&lt;code>start.S&lt;/code>中赋值了sp：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> /* Prepare stack pointer and jump to C. */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> adr x0, boot_cpu_stack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add x0, x0, #0x1000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov sp, x0 /* sp = boot_cpu_stack + 0x1000 */
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>boot_cpu_stack&lt;/code>在&lt;code>init.c&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define INIT_STACK_SIZE 0x1000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">boot_cpu_stack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PLAT_CPU_NUMBER&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">INIT_STACK_SIZE&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于&lt;code>PLAT_CPU_NUMBER&lt;/code>被定义为4，故&lt;code>boot_cpu_stack&lt;/code>大小为4*4096，可供四个CPU使用。sp初始化后指向第一个4069，也就是第一个cpu内核栈的最高位。初始化时，fp=sp。&lt;/p>
&lt;p>但这是bootloader的栈。后续进入内核后，会重新分配内核栈，参见&lt;code>head.S&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">BEGIN_FUNC(start_kernel)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov x3, #0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> msr TPIDR_EL1, x3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ldr x2, =kernel_stack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add x2, x2, KERNEL_STACK_SIZE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov sp, x2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">END_FUNC(start_kernel)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>于是内核栈的定义在start_kernel函数。&lt;/p>
&lt;p>有关内核栈的位置，因为kernel_stack是全局数组，且未初始化，因而位于.bss。同时没有其他未初始化变量，因此首地址在&lt;code>.bss + KERNEL_STACK_SIZE&lt;/code>。&lt;/p>
&lt;p>通过readelf得到.bss的VMA为0xffffff0000090100，KERNEL_STACK_SIZE为0x2000，进入gdb调试可以验证&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gef➤ x/g $sp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff0000092100 &amp;lt;kernel_stack+8192&amp;gt;: 0x0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="练习7-调用惯例">练习7-调用惯例&lt;/h3>
&lt;p>先看stack_test函数。这里gdb安装了gef插件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gef➤ b stack_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 1 at 0xffffff000008c020
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gef➤ disas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Dump of assembler code for function stack_test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=&amp;gt; 0xffffff000008c020 &amp;lt;+0&amp;gt;: stp x29, x30, [sp, #-32]! /* FP、LR 入栈 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c024 &amp;lt;+4&amp;gt;: mov x29, sp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c028 &amp;lt;+8&amp;gt;: str x19, [sp, #16] /* x 入栈 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c02c &amp;lt;+12&amp;gt;: mov x19, x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c030 &amp;lt;+16&amp;gt;: mov x1, x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c034 &amp;lt;+20&amp;gt;: adrp x0, 0xffffff0000090000 # 计算偏移
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c038 &amp;lt;+24&amp;gt;: add x0, x0, #0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c03c &amp;lt;+28&amp;gt;: bl 0xffffff000008c620 &amp;lt;printk&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c040 &amp;lt;+32&amp;gt;: cmp x19, #0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c044 &amp;lt;+36&amp;gt;: b.gt 0xffffff000008c068 &amp;lt;stack_test+72&amp;gt; # greater than /* 递归 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c048 &amp;lt;+40&amp;gt;: bl 0xffffff000008c0dc &amp;lt;stack_backtrace&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c04c &amp;lt;+44&amp;gt;: mov x1, x19
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c050 &amp;lt;+48&amp;gt;: adrp x0, 0xffffff0000090000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c054 &amp;lt;+52&amp;gt;: add x0, x0, #0x20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c058 &amp;lt;+56&amp;gt;: bl 0xffffff000008c620 &amp;lt;printk&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c05c &amp;lt;+60&amp;gt;: ldr x19, [sp, #16] # x19 = sp + 16 /* x 出栈 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c060 &amp;lt;+64&amp;gt;: ldp x29, x30, [sp], #32 # load pair /* FP、LR 出栈 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c064 &amp;lt;+68&amp;gt;: ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c068 &amp;lt;+72&amp;gt;: sub x0, x19, #0x1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c06c &amp;lt;+76&amp;gt;: bl 0xffffff000008c020 &amp;lt;stack_test&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c070 &amp;lt;+80&amp;gt;: mov x1, x19
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c074 &amp;lt;+84&amp;gt;: adrp x0, 0xffffff0000090000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c078 &amp;lt;+88&amp;gt;: add x0, x0, #0x20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c07c &amp;lt;+92&amp;gt;: bl 0xffffff000008c620 &amp;lt;printk&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c080 &amp;lt;+96&amp;gt;: ldr x19, [sp, #16]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c084 &amp;lt;+100&amp;gt;: ldp x29, x30, [sp], #32
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c088 &amp;lt;+104&amp;gt;: ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of assembler dump.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行，观察栈的变化，这里省略部分输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gef➤ c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────── registers ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x0 : 0x0000000000000005 # 这一层函数的输入值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x19 : 0x0000000000000000 # 上一层函数的返回值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x29 : 0xffffff00000920f0 # FP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x30 : 0xffffff000008c0d4 → &amp;lt;main+72&amp;gt; # LR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$sp : 0xffffff00000920f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────────── stack ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f0│+0x0000: 0x0000000000000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f8│+0x0008: 0xffffff000008c018 # 栈头，可能是栈初始化的数据结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">──────────────────────────────────────────── trace ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#0] 0xffffff000008c020 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#1] 0xffffff000008c0d4 → main()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────────────────────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gef➤ c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────── registers ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x0 : 0x0000000000000004
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x19 : 0x0000000000000005
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x29 : 0xffffff00000920d0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x30 : 0xffffff000008c070 #→ &amp;lt;stack_test+80&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$sp : 0xffffff00000920d0 → 0xffffff00000920f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────────── stack ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920d0│+0x0000: 0xffffff00000920f0 ─┐ # FP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920d8│+0x0008: 0xffffff000008c0d4 │ # LR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920e0│+0x0010: 0x0000000000000000 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920e8│+0x0018: 0x00000000ffffffc0 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f0│+0x0020: 0x0000000000000000 ◄┘
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f8│+0x0028: 0xffffff000008c018
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────────── trace ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#0] 0xffffff000008c020 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#1] 0xffffff000008c070 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#2] 0xffffff000008c0d4 → main()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">────────────────────────────────────────────────────────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gef➤ c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────── registers ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x0 : 0x0000000000000003
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x19 : 0x0000000000000004
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x29 : 0xffffff00000920b0 → 0xffffff00000920d0 → 0xffffff00000920f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x30 : 0xffffff000008c070
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$sp : 0xffffff00000920b0 → 0xffffff00000920d0 → 0xffffff00000920f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">──────────────────────────────────────────── stack ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920b0│+0x0000: 0xffffff00000920d0 ─┐ # [#1]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920b8│+0x0008: 0xffffff000008c070 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920c0│+0x0010: 0x0000000000000005 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920c8│+0x0018: 0x00000000ffffffc0 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920d0│+0x0020: 0xffffff00000920f0 ◄┘ # [#2]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920d8│+0x0028: 0xffffff000008c0d4 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920e0│+0x0010: 0x0000000000000000 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920e8│+0x0018: 0x00000000ffffffc0 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f0│+0x0020: 0x0000000000000000 ◄┘ # [#3]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f8│+0x0028: 0xffffff000008c018
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">─────────────────────────────────────────── trace ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#0] 0xffffff000008c020 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#1] 0xffffff000008c070 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#2] 0xffffff000008c070 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#3] 0xffffff000008c0d4 → main()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">──────────────────────────────────────────────────────
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到每次递归调用压栈4个64位字，分别是：上一层FP，LR，参数x和0x00000000ffffffc0。最后一个64位字用途未知。&lt;/p>
&lt;h3 id="练习9-backtrace">练习9-backtrace&lt;/h3>
&lt;p>提供&lt;code>read_fp()&lt;/code>接口，我们知道fp永远指向父函数的fp，故递归调用即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u64&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">u64&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">u64&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">read_fp&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 双层指针，因为第一层是本函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;LR %lx FP %lx Args %d %d %d %d %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">fp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//为什么5个参数是fp-2到fp+2？样例只包括一个参数，只要出现fp+2就能测试通过
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">u64&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//下一层
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>满分通过，懒得贴图了。&lt;/p>
&lt;hr>
&lt;p>看到大佬写的，瞬间不想写了，寄。
&lt;a class="link" href="https://www.cnblogs.com/kangyupl/p/chcore_lab1.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/kangyupl/p/chcore_lab1.html&lt;/a>&lt;/p></description></item><item><title>从scapy和wireshark学计算机网络</title><link>https://lonelyuan.github.io/HugoBlog/p/%E4%BB%8Escapy%E5%92%8Cwireshark%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><pubDate>Fri, 22 Oct 2021 23:55:54 +0000</pubDate><guid>https://lonelyuan.github.io/HugoBlog/p/%E4%BB%8Escapy%E5%92%8Cwireshark%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid><description>&lt;p>众所周知，计网被评为最困的计算机专业课，俗称计算机中的语文。👴看了《计算机网络－自顶向下方法》（后文简称CNTDA）之后，觉得翻译就像汤姆叔叔的烂苹果派一样糟糕，上帝啊，我发誓会狠狠踢他的屁股。建议带🔥去看英文原版。&lt;/p>
&lt;p>但是👴最近接触的许多实验还是很好玩的，于是本文试图通过全程动手实操学习计网。&lt;/p>
&lt;hr>
&lt;p>主要工具：&lt;/p>
&lt;ul>
&lt;li>wireshark是坠nb的网络封包分析软件。就是用来抓包的。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>下载：&lt;a class="link" href="https://www.wireshark.org/download.html" target="_blank" rel="noopener"
>https://www.wireshark.org/download.html&lt;/a>
教程：&lt;a class="link" href="https://www.javatpoint.com/wireshark" target="_blank" rel="noopener"
>https://www.javatpoint.com/wireshark&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>scapy库是python的网络编程库，可以让你细致入微的操纵网络流量。就是用来发包的。
&lt;ul>
&lt;li>//不要和爬虫库scrapy混淆&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>scapy文档：&lt;a class="link" href="https://scapy.readthedocs.io/en/latest/" target="_blank" rel="noopener"
>https://scapy.readthedocs.io/en/latest/&lt;/a>
中文版：&lt;a class="link" href="https://www.osgeo.cn/scapy/introduction.html" target="_blank" rel="noopener"
>https://www.osgeo.cn/scapy/introduction.html&lt;/a> //有些翻译错误&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="计网基本概念">计网基本概念&lt;/h2>
&lt;h3 id="包package">💣包(package)&lt;/h3>
&lt;p>等等，啥是“抓包”？啥是“发包”？啥是“包”？&lt;/p>
&lt;p>&lt;img src="https://lonelyuan.github.io/post-images/1635925682452.png"
loading="lazy"
alt="原来这就是“包”"
>&lt;/p>
&lt;p>当然，包不仅仅是一个 CSGO 术语，在计算机网络中，包(package)有多个近义词，包括：报文/数据报(Datagram)，分组/封包(Packet)……根据语境不同而区分，但大致指的是同一件事情：即网络中真正流动着的东西，我们希望网络来传递的东西。只不过“包”是最通俗的叫法，那么抓包和发包就不难理解了。&lt;/p>
&lt;p>你还想问，包到底长什么样？众所周知，快递由包装和里面的东西组成，其实网络上的封包也差不多，也大致都有两部分：&lt;/p>
&lt;ul>
&lt;li>包头，学名首部(Header)——快递包装上的标签，写着目的地址，联系电话，快递号等信息&lt;/li>
&lt;li>包体，学名载荷(Payload)——快递要运输的货物本身。某些语境下也喜欢称为报文。&lt;/li>
&lt;/ul>
&lt;p>当然，网络封包归根结底还是线性的比特序列，于是我们需要包头来识别这个封包的相关信息，就像看快递先看标签一样。&lt;/p>
&lt;p>另外，一个协议的封包也可以成为另一个协议的载荷，后面你会看到诸如&lt;code>pkt.payload.payload.payload.payload&lt;/code>的套娃用法，要理解这种套娃，还需要知道分层思想。&lt;/p>
&lt;h3 id="分层layering">🍰分层(layering)&lt;/h3>
&lt;p>CNTDA 中用邮政系统类比计算机网络，这是最常用的例子，这里我们用快递物流网来举例。随便打开你的网购记录，你会发现快递物流大概经过以下过程：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;strong>客户&lt;/strong>发货：把&lt;em>货物&lt;/em>和&lt;em>地址&lt;/em>交给快递点
&lt;ul>
&lt;li>&lt;strong>快递网点&lt;/strong>揽件：&lt;em>包装&lt;/em>货物而变成包裹；包裹被送往最近的中转中心
&lt;ul>
&lt;li>&lt;strong>中转中心&lt;/strong>运输：根据包裹目的地不同，&lt;em>分拣&lt;/em>并&lt;em>装车&lt;/em>运输给不同的中转中心；若收到本片区的包裹，&lt;em>卸车&lt;/em>并&lt;em>分拣&lt;/em>给不同的网点&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>快递网点&lt;/strong>派送：按包裹的&lt;em>地址&lt;/em>，快递员送货上门&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>客户&lt;/strong>取件：&lt;em>拆箱&lt;/em>，拿到货物，确认无误签收&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>你知道发一个快递要经历怎样的困难吗？你不知道，你只关心你自己。这里的重点是，客户不需要关心中转中心如何指挥重型货车或飞机，网点也只需要关心如何包装好客户的货物。快递网络明显的呈现出三层的分层架构，&lt;strong>每一层之间只需要关心自己的工作，并和相邻的层交互&lt;/strong>。这就是应对复杂系统的组织方法——分层。&lt;/p>
&lt;p>课本上会提到OSI七层模型或者TCP/IP五层模型，这里的模型全称是&lt;strong>协议分层模型&lt;/strong>，又来新词了，别急，后面还有：&lt;/p>
&lt;ul>
&lt;li>协议(Protocol)：同一层级内的交互规则。//横向&lt;/li>
&lt;li>服务(Service)：不同层级间的交互规则。//纵向&lt;/li>
&lt;/ul>
&lt;p>每一层的工作，就是调用下层的接口，并为上层提供服务。接口(Interface)和服务的区别是，服务作为实体，由本层负责实现，暴露出接口供上层调用；而接口则是抽象的，本层并不知道下一层的可靠性。&lt;/p>
&lt;p>由此你能否看出分层思想的优越性？每一层只关注自己的实现，于是大问题被分解成了小问题。好比一个总工作量100的问题，不了解分层思想的你只能10+10+10+……=100；而分层思想提供了乘法法则，于是你可以通过10*10=100，只需要完成20工作量。//个中思想也体现了OOP中的解耦。&lt;/p>
&lt;p>上述类比中标注了一些对应关系：&lt;/p>
&lt;ul>
&lt;li>封包(Packaging)：包装，货物→包裹。信息在层次间传递的过程就是封包/解封的过程。&lt;/li>
&lt;li>路由(Routing)：分拣。根据包裹上的标签，决定包装的去向。&lt;/li>
&lt;/ul>
&lt;p>可以看到，每一层都有自己的“货物”，比如中转中心的载荷是满载包裹的长途货车而不是单个包裹。报文在每一层都被封装并交给下一层，要想得到原始报文只能一层一层解开，操作模式类似栈。由此协议分层模型也被简称为&lt;strong>协议栈&lt;/strong>(Protocol stack)。&lt;/p>
&lt;p>最后简单解释五层模型每一层的分工，自底向上顺序：&lt;/p>
&lt;ul>
&lt;li>物理层：对接物理介质，运输比特
&lt;ul>
&lt;li>提供基于比特的通信路径&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>链路层：将路径串联成链
&lt;ul>
&lt;li>提供基于链路的接入、交付、和传输服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>网络层：将链路编织成网
&lt;ul>
&lt;li>提供任意两主机之间的通信&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>运输层：将主机的通信分解为进程的通信
&lt;ul>
&lt;li>提供进程间的逻辑通信&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>应用层：实现用户需求
&lt;ul>
&lt;li>向用户提供透明可靠的网络服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>偶剋！你已经了解了分层思想，下面来设计互联网吧！（迫真）&lt;/p>
&lt;h2 id="开始实验">⌚️开始实验&lt;/h2>
&lt;p>有关计网的学习顺序自古就有自顶向下还是自底向上的分歧，余以为只要理解了分层思想，顺序便不算很重要。本系列实验将遵从浅入深出的原则，从应用层逐步深入到链路层再返回应用层，同时难度不断加大。&lt;/p>
&lt;p>实验来源：&lt;/p>
&lt;ul>
&lt;li>👴自己：0x10, 0x20&lt;/li>
&lt;li>SEEDLab，雪城大学的信息安全课配套实验，网络安全部分。国内知名度不高所以值得一做。&lt;a class="link" href="https://seedsecuritylabs.org/Labs_20.04" target="_blank" rel="noopener"
>官方网站&lt;/a>&lt;/li>
&lt;li>CNTDA 实验：&lt;a class="link" href="https://github.com/moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES" target="_blank" rel="noopener"
>GIthub上抄的作业&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>实验代码仓库：&lt;a class="link" href="https://github.com/lonelyuan/ComputerNetwork-exp" target="_blank" rel="noopener"
>lonelyuan/ComputerNetwork-exp (github.com)&lt;/a>&lt;/p>
&lt;p>实验编号规则：0xabn&lt;/p>
&lt;ul>
&lt;li>a：层级：1 - 应用层；2 - 传输层；3 - 网络层；4 - 链路层；5 - 物理层&lt;/li>
&lt;li>b：难度：0 - ⭐；1 - ⭐⭐；2 - ⭐⭐⭐；3 - ⭐⭐⭐⭐；4 - ⭐⭐⭐⭐⭐；&lt;/li>
&lt;li>n：重复难度则再加一位编号&lt;/li>
&lt;/ul>
&lt;p>//【想看哪个没更新的可以催👴】&lt;/p>
&lt;/blockquote>
&lt;h3 id="0x10-应用层-server--">0x10 应用层: Server | ⭐&lt;/h3>
&lt;h4 id="intro">Intro&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>目标：用scapy/socket做一个静态服务器。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>实际上，python3已经自带了一个简易http服务器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ python3 -m http.server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Serving HTTP on 0.0.0.0 port &lt;span class="m">8000&lt;/span> &lt;span class="o">(&lt;/span>http://0.0.0.0:8000/&lt;span class="o">)&lt;/span> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">127.0.0.1 - - &lt;span class="o">[&lt;/span>10/Nov/2021 14:51:57&lt;span class="o">]&lt;/span> &lt;span class="s2">&amp;#34;GET / HTTP/1.1&amp;#34;&lt;/span> &lt;span class="m">200&lt;/span> -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>浏览器访问：&lt;code>localhost:8000&lt;/code>，如果当前目录下有&lt;code>index.html&lt;/code>文件，浏览器即可显示该html文档。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该http服务器也是基于另一个python标准库socket编写的，本实验我们直接用socket实现一个更简单的http服务器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>前置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>术语：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>C/S架构(client-server)：互联网的基本模型。通信的双方通常分成两个角色：&lt;/p>
&lt;ul>
&lt;li>发起的一方称为客户端(C)，即前端。&lt;/li>
&lt;li>接收的一方称为服务端(C)，即后端。为了保证随时接收请求，服务端需要持久监听某通信端口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>URL：统一资源标识符。也就是互联网上的地址，网址。&lt;/p>
&lt;ul>
&lt;li>完整语法：&lt;code>[协议名]://[用户名]:[密码]@[服务器地址]:[服务器端口号]/[路径]?[查询字符串]#[片段]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>HTTP协议：应用层最普遍的文本协议之一。文本协议表示其所有内容都是可读的，其主要格式如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">GET / HTTP/1.1\r\n /* 一个状态行 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: localhost\r\n /* 多个首部行 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: close\r\n\r\n /* 以两个CRLF(回车换行，编程时用\r\n表示)隔断 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;html&amp;gt;... &amp;lt;/html&amp;gt; /* payload */
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>HTML：标记语言，用&amp;lt;&amp;gt;组织起网页的骨架。浏览器会把HTML源码渲染成好看的网页。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>socket：逻辑通信的端点。&lt;/p>
&lt;ul>
&lt;li>socket是逻辑通信的接口。上文提到网络层为运输层和应用层提供了点到点的逻辑通信服务，该服务的基本接口就是socket。&lt;/li>
&lt;li>socket是通信端点的抽象。它将进程/应用和&lt;code>(主机host,端口port)&lt;/code> 二元组绑定，于是通过 &lt;code>(host,port)&lt;/code> 即可标记网络上的进程。
&lt;ul>
&lt;li>一个主机有一个地址和多个端口。地址和端口的关系，就像房子和窗户的关系。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>socket由操作系统提供。本实验用到的是python对socket的封装，但不管换什么语言本质上都是系统调用。&lt;/li>
&lt;li>//其翻译“套接字”非常具有误导性，建议直接用英文单词。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>建议花5分钟通读《图解HTTP》前6章（或者《CNTDA》2.1-2.2节），以理解上述术语&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="guidelines">Guidelines&lt;/h4>
&lt;ol>
&lt;li>
&lt;h5 id="socket通信">Socket通信&lt;/h5>
&lt;/li>
&lt;/ol>
&lt;p>要使用socket通信，通信双方都需要持有一个socket对象，其主要方法和生命周期如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> SERVER CLIENT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket() socket()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ▼ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bind((host,port)) │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ▼ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> listen(num) │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ▼ ▼
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> accept() connect((host,port))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├──►send()──►recv()◄──┤
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├──►recv()◄──send()◄──┤
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ▼ ▼
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> close() close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>于是我们可以建立起服务器代码的框架：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">socket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">socket&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bind&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="s1">&amp;#39;0.0.0.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8000&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 绑定地址和端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 开始监听，num表示最大连接数量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">accept&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># c是客户端socket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] accepted:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">req&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] recieved:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 接收类型为字节对象bytes，要打印则应当编码为字符串&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">http_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 解析请求，返回响应&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>It&amp;rsquo;s worth noting that，服务端socket并没有发送任何数据！&lt;code>accept()&lt;/code>方法将返回一个客户端socket对象，由这个socket执行数据的收发。这样做的原因是为了实现多路复用，即让服务器支持多个连接同时通信。&lt;/li>
&lt;li>于是我们可以看到，对每个TCP连接，都有一对socket存在于通信的两端。而服务端socket仅仅做了管理连接的工作，他们放在一个类里，是出于简化代码的考虑。（当然实现多路复用的方式不只有一种。&lt;/li>
&lt;/ul>
&lt;p>现在，你可以自己尝试编写socket客户端跟该服务器进行明文的通信。不过我们的目标是HTTP服务器，先复习一下HTTP协议格式，状态码，首部等知识吧。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;h5 id="http解析">HTTP解析&lt;/h5>
&lt;/li>
&lt;/ol>
&lt;p>如果编程能力尚可，你可以自己写HTTP类来把报文解析成对象。这里还是用现成的，scapy库提供的&lt;code>HTTPRequest&lt;/code>和&lt;code>HTTPResponse&lt;/code>类。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">scapy.layers.http&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">scapy.all&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">http_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req_str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">req&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">HTTPRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">req&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">do_dissect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req_str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 解析请求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] req: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">summary&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># body = route(req.Path.decode()) # 路由函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;h1&amp;gt;Hello~~~&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">HTTPResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">HTTP&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">body&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[+] res: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">summary&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">raw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>do_dissect()&lt;/code>方法将字符串解析为对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP()/res/body&lt;/code>：scapy核心语法&lt;code>/&lt;/code>，表示协议栈的堆叠，可以链式调用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这里的类型为：&lt;code>HTTP / HTTPResponse / Raw&lt;/code>，之所以要这样三层表示，是因为HTTPResponse/HTTPRequest类仅仅是一个中间层，如果没有HTTP层，scapy会报warning。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>raw()&lt;/code>方法返回封包的字节数组，可以看到在socket之上，我们先把报文转化为对象，解析之后再返回报文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>观察封包的常用方法还有：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">In [2]: a = Ether()/IP(dst=&amp;#34;www.wsnd.com&amp;#34;)/TCP()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">In [3]: a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Out[3]: &amp;lt;Ether type=IPv4 |&amp;lt;IP frag=0 proto=tcp dst=Net(&amp;#34;www.wsnd.com/32&amp;#34;) |&amp;lt;TCP |&amp;gt;&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">In [4]: a.summary()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Out[4]: &amp;#39;Ether / IP / TCP 0.0.0.0:ftp_data &amp;gt; Net(&amp;#34;www.wsnd.com/32&amp;#34;):http S&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">In [5]: a.show()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###[ Ethernet ]###
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dst = ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> src = 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> type = IPv4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###[ IP ]###
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> version = 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proto = tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chksum = None
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> src = 0.0.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dst = Net(&amp;#34;www.wsnd.com/32&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> \options \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###[ TCP ]###
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sport = ftp_data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dport = http
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">In [6]: ls(a)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dst : DestMACField = &amp;#39;ff:ff:ff:ff:ff:ff&amp;#39; (&amp;#39;None&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">src : SourceMACField = &amp;#39;00:00:00:00:00:00&amp;#39; (&amp;#39;None&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type : XShortEnumField = 2048 (&amp;#39;36864&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">In [7]: raw(a)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Out[7]: b&amp;#39;\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x08\x00E\x00\x00(\x00\x01\x00\x00@\x06\xc9\xa8\x00\x00\x00\x00H\ti\x1e\x00\x14\x00P\x00\x00\x00\x00\x00\x00\x00\x00P\x02 \x00\xdeW\x00\x00&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">In [8]: hexdump(a)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0000 FF FF FF FF FF FF 00 00 00 00 00 00 08 00 45 00 ..............E.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0010 00 28 00 01 00 00 40 06 C9 A8 00 00 00 00 48 09 .(....@.......H.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0020 69 1E 00 14 00 50 00 00 00 00 00 00 00 00 50 02 i....P........P.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0030 20 00 DE 57 00 00 ..W..
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在运行服务器，用浏览器访问&lt;code>localhost:8000&lt;/code>，你可以看到大大的“Hello”了！&lt;/p>
&lt;h4 id="task">Task&lt;/h4>
&lt;p>下面的任务交给你，目标是尽量接近python自带http服务器的表现。&lt;/p>
&lt;p>为了实现静态服务器，你需要根据访问的路径返回对应的内容。为此，请完善&lt;code>route()&lt;/code>函数：&lt;/p>
&lt;ul>
&lt;li>访问根路径&lt;code>/&lt;/code>将返回&lt;code>index.html&lt;/code>&lt;/li>
&lt;li>使用os模块读取文件，注意文本文件和二进制文件（如图片）的处理&lt;/li>
&lt;li>用HTTP响应码进行错误处理，比如&lt;code>404 NOT FOUND&lt;/code>，&lt;code>302 REDIRECT&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>最后，在根目录(你在哪里运行你的服务器脚本，那里就是你的根目录)下放入任意文件，浏览器都可以访问其内容，如果不存在则会返回404。&lt;/p>
&lt;h4 id="expand">Expand&lt;/h4>
&lt;ul>
&lt;li>抓包观察访问你的网站和访问正常网站有什么区别。你会发现，本实验几乎没有讲解HTTP首部的细节，请自行了解诸如&lt;code>Content-Type:&lt;/code>，&lt;code>Content-Length:&lt;/code>，&lt;code>Transfer-Encoding:&lt;/code>等首部，看看传输图片/压缩文件时的标准做法，以及在遇到大文件时如何实现分段运输。（尽管我们的实现很简陋，浏览器还是能正常工作，说明HTTP是相当健壮的协议）&lt;/li>
&lt;li>你的服务器是否有安全问题？你可以访问根目录之外的文件吗？如： &lt;code>/../../../../etc/passwd&lt;/code>（linux下）&lt;/li>
&lt;li>服务器概念辨析：Web初学者容易对服务器概念感到迷惑。软件语境下，服务器指对外提供服务的程序，常用服务器如apache、nginx，tomcat等；硬件语境下则指运行着服务器软件的机器。&lt;/li>
&lt;li>我们实现的是静态网站，你可能疑惑是不是还有动态网站。当然有，区分动态和静态并不是网页会不会自己动，而是服务器上的数据是否可以动态的改变，而我们的服务器只能被动的显示文件，客户端无法做出任何更改。现代web框架诸如Springboot，Django之类当然是动态网站框架。&lt;/li>
&lt;/ul>
&lt;p>实际上，计网并不关心应用层以上的东西，让我们向下看，探究socket背后的原理吧。&lt;/p>
&lt;h3 id="0x20-传输层socket--">0x20 传输层：Socket | ⭐&lt;/h3>
&lt;h4 id="intro-1">Intro&lt;/h4>
&lt;ul>
&lt;li>目标：用 scapy 实现TCP协议，以尽可能替换上一个实验使用的socket模块
&lt;ul>
&lt;li>// 你可能猜到了，下一个实验是不是要自己实现IP协议呀？恭喜你猜错了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>前置：
&lt;ul>
&lt;li>术语
&lt;ul>
&lt;li>TCP/UDP&lt;/li>
&lt;li>TCP报文格式&lt;/li>
&lt;li>有限状态机&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>完成本实验仅涉及《CNTDA》3.4-3.5节，如果理解有困难，建议先完成&lt;em>Wireshark 实验：TCP观察&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在上一个实验中，我们了解到socket是操作系统提供的系统调用，例如 Linux 中，创建socket对象返回的&lt;code>sock_fd&lt;/code>本质上就是一个文件描述符，即建立连接后可以直接像文件一样读写，绑定端口后操作系统会保护该端口不被其他进程占用。而本实验关注运输层原理，所以绕过了操作系统，使用更底层的接口实现TCP。当然，是最简陋的一种实现。&lt;/li>
&lt;/ul>
&lt;h4 id="guidelines-1">Guidelines&lt;/h4>
&lt;ol>
&lt;li>Socket实现原理&lt;/li>
&lt;/ol>
&lt;p>那么，socket里面到底有什么？首先，要保存地址端口等信息；其次，要有收发的两个缓冲区，这里可以用队列；然后，为了实现可靠运输，需要用到计时器来触发重传，需要变量标记滑动窗口；我们还用自动机思想来管理连接状态。Socket底层模型如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> ┌─────Socket──────┐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">┌─────┐ │ ────────────┐ │ ┌────┐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├──┼─► SendQ ├──┼─►│ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ │ ────────────┘ │ │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ App │ │ Buffers │ │ IP │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ │ ┌──────────── │ │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │◄─┼──┤ RecvQ ◄─┼──┤ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└─────┘ │ └──────────── │ └────┘
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├────Variables────┤
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ Status │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ Timer │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ SendBase │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ NextSeq │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └─────────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里就需要面向对象上场了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Socket&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SendQ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RecvQ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Status&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CLOSED&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Timer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SendBase&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">NextSeq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># SERVER&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">accept&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#return c, addr &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># CLIENT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># BOTH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#return data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面逐个实现socket接口。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>定制TCP报文&lt;/p>
&lt;/li>
&lt;li>
&lt;p>连接管理&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>了解了三次握手，就可以实现connect函数了&lt;/p>
&lt;h4 id="task-1">Task&lt;/h4>
&lt;ol>
&lt;li>多路复用&lt;/li>
&lt;/ol>
&lt;p>目前的实现只能支持一个TCP连接，请实现&lt;code>listen(num)&lt;/code>函数，调用时创建 num 对读写缓冲区，响应的为&lt;/p>
&lt;ol>
&lt;li>完善TCP功能：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>RTT&lt;/li>
&lt;li>可靠运输&lt;/li>
&lt;li>流量控制&lt;/li>
&lt;li>阻塞控制&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>拓展UDP到你的socket&lt;/li>
&lt;/ol>
&lt;h4 id="expand-1">Expand&lt;/h4>
&lt;h3 id="0x30-网络层-路由追踪--">0x30 网络层: 路由追踪 | ⭐&lt;/h3>
&lt;h4 id="intro-2">Intro&lt;/h4>
&lt;p>术语：&lt;/p>
&lt;ul>
&lt;li>IP层：IP协议，ICMP协议，路由协议&lt;/li>
&lt;li>路由追踪：请求某地址经过了那些路由器？&lt;/li>
&lt;/ul>
&lt;h4 id="guidelines-2">Guidelines&lt;/h4>
&lt;p>scapy实现了路由追踪函数，你可以钻研一下&lt;a class="link" href="https://github.com/secdev/scapy/blob/master/scapy/layers/inet.py#L1740-L1773" target="_blank" rel="noopener"
>源码&lt;/a>（很短），下面写一个自己的traceroute。&lt;/p>
&lt;h4 id="task-2">Task&lt;/h4>
&lt;p>下面用Ipython演示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">scapy.all&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;www.amazon.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">ans&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unans&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dst&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">TCP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mh">0x2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Begin&lt;/span> &lt;span class="n">emission&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Finished&lt;/span> &lt;span class="n">sending&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="n">packets&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">.*****..**********..........................................................................^&lt;/span>&lt;span class="n">C&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Received&lt;/span> &lt;span class="mi">92&lt;/span> &lt;span class="n">packets&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">got&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="n">answers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">remaining&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="n">packets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">snd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rcv&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">ans&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">snd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ttl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rcv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rcv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TCP&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span> &lt;span class="mf">11.206.119.46&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2&lt;/span> &lt;span class="mf">11.110.80.173&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">3&lt;/span> &lt;span class="mf">10.102.15.74&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">4&lt;/span> &lt;span class="mf">11.73.2.241&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5&lt;/span> &lt;span class="mf">124.160.189.101&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">6&lt;/span> &lt;span class="mf">219.158.97.2&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">7&lt;/span> &lt;span class="mf">219.158.34.190&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">8&lt;/span> &lt;span class="mf">69.192.14.38&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">9&lt;/span> &lt;span class="mf">219.158.24.134&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">10&lt;/span> &lt;span class="mf">219.158.10.30&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">11&lt;/span> &lt;span class="mf">69.192.14.38&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">12&lt;/span> &lt;span class="mf">69.192.14.38&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">13&lt;/span> &lt;span class="mf">69.192.14.38&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">14&lt;/span> &lt;span class="mf">69.192.14.38&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面讲解核心代码：&lt;/p>
&lt;p>&lt;code>ans,unans=sr(IP(dst=target,ttl=(1,30),id=RandShort())/TCP(flags=0x2))&lt;/code>&lt;/p>
&lt;ul>
&lt;li>sr()：send and receive，返回的两个参数分别是得到应答的数据包列表和未应答的包列表。&lt;/li>
&lt;li>ttl=(4,30)：ttl参数在IP层表示ICMP包的转发次数（跳数）。此外，传入tuple表示一个范围，sr函数将会为这个范围内的每个值生成一个发包。（如果有多个tuple参数，则会按笛卡尔积规则生成发包列表）&lt;/li>
&lt;li>TCP(flags=0x2)：在TCP头部设定flag字段的值，0x2对应ACK，即确认收到包。&lt;/li>
&lt;li>综合起来，这条代码将发送30个包，其ttl从1到30。并筛选返回ACK的包。&lt;/li>
&lt;li>这样根据IP层路由算法，到达ttl的包无论是否找到目标都会返回，直到找到目标，TCP层返回ACK。遍历ttl形成的列表即是经过的所有路由。&lt;/li>
&lt;/ul>
&lt;h4 id="expand-2">Expand&lt;/h4>
&lt;h3 id="0x301-网络层-欺骗ping----todo">0x301 网络层: 欺骗ping | ⭐ | TODO&lt;/h3>
&lt;h4 id="intro-3">Intro&lt;/h4>
&lt;ul>
&lt;li>来源：https://seedsecuritylabs.org/Labs_20.04/Files/ICMP_Redirect/ICMP_Redirect.pdf&lt;/li>
&lt;li>术语：&lt;/li>
&lt;/ul>
&lt;h4 id="guidelines-3">Guidelines&lt;/h4>
&lt;h4 id="task-3">Task&lt;/h4>
&lt;h4 id="expand-3">Expand&lt;/h4>
&lt;h3 id="0x41-链路层-arp缓存投毒----todo">0x41 链路层: ARP缓存投毒 | ⭐⭐ | TODO&lt;/h3>
&lt;p>&lt;a class="link" href="https://seedsecuritylabs.org/Labs_20.04/Files/ARP_Attack/ARP_Attack.pdf" target="_blank" rel="noopener"
>https://seedsecuritylabs.org/Labs_20.04/Files/ARP_Attack/ARP_Attack.pdf&lt;/a>&lt;/p>
&lt;h3 id="0x21-传输层-tcp攻击----todo">0x21 传输层: TCP攻击 | ⭐⭐ | TODO&lt;/h3>
&lt;p>&lt;a class="link" href="https://seedsecuritylabs.org/Labs_20.04/Files/TCP_Attacks/TCP_Attacks.pdf" target="_blank" rel="noopener"
>https://seedsecuritylabs.org/Labs_20.04/Files/TCP_Attacks/TCP_Attacks.pdf&lt;/a>&lt;/p>
&lt;p>TCP协议
SYN泛洪
TCP reset
TCP session hijacking反弹shell （重点）&lt;/p>
&lt;h3 id="0x31-网络层-natdhcp和虚拟机-----todo">0x31 网络层: NAT，DHCP和虚拟机 | ⭐⭐ | TODO&lt;/h3>
&lt;p>相信折腾过虚拟机的同学都绕不过这个问题：我的虚拟机怎么连不上网？本实验基于wmware虚拟机平台，讲解几种虚拟机网络模式及其原理。&lt;/p>
&lt;h3 id="0x13-应用层-dns本地攻击----todo">0x13 应用层: DNS本地攻击 | ⭐⭐⭐ | TODO&lt;/h3>
&lt;p>&lt;a class="link" href="https://seedsecuritylabs.org/Labs_20.04/Files/DNS_Local/DNS_Local.pdf" target="_blank" rel="noopener"
>https://seedsecuritylabs.org/Labs_20.04/Files/DNS_Local/DNS_Local.pdf&lt;/a>&lt;/p>
&lt;h3 id="0x14-应用层-ssl协议和https----todo">0x14 应用层: SSL协议和HTTPS | ⭐⭐⭐⭐ | TODO&lt;/h3>
&lt;h3 id="0x15-应用层-多线程web代理服务器-----todo">0x15 应用层: 多线程Web代理服务器 | ⭐⭐⭐⭐⭐ | TODO&lt;/h3>
&lt;h3 id="0x151-应用层-vpn----todo">0x151 应用层: VPN | ⭐⭐⭐⭐⭐ | TODO&lt;/h3>
&lt;p>探究VPN原理&lt;/p>
&lt;h3 id="0x152-应用层-v2ray协议学习----todo">0x152 应用层: V2Ray协议学习 | ？？？ | TODO&lt;/h3>
&lt;p>有生之年研究一下Vmess等协议&lt;/p>
&lt;!-- 省略的：
- 防火墙iptables实验
- mitnick攻击
- BGP
- 802.11
- --></description></item><item><title>基于vivado的基于FPGA的一种基于MIPS的一种五级流水线CPU实现的注释</title><link>https://lonelyuan.github.io/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/</link><pubDate>Wed, 09 Jun 2021 17:14:19 +0000</pubDate><guid>https://lonelyuan.github.io/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/</guid><description>&lt;img src="https://lonelyuan.github.io/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/mips_pipeline_cpu.jfif" alt="Featured image of post 基于vivado的基于FPGA的一种基于MIPS的一种五级流水线CPU实现的注释" />&lt;blockquote>
&lt;p>本文所述为计算机组成原理课拓展实验的相关记录，基于“龙芯体系结构与CPU设计教学实验系统”
项目官网： &lt;a class="link" href="http://www.loongson.cn/business/general/teach/356.html" target="_blank" rel="noopener"
>http://www.loongson.cn/business/general/teach/356.html&lt;/a>；
相关资料代码：#TODO:: github仓库
PS：标题可简记为《基于基于的一种基于的一种实现》&lt;/p>
&lt;/blockquote>
&lt;h2 id="吐槽时间">🤓吐槽时间&lt;/h2>
&lt;p>快考试了，👴发觉👴计组学了个🔨，👴去年也学了个🔨，但是去年可以归因于晦气的晦气，今年只能说自己晦气。难道还要重蹈去年的晦气吗？👴本应该回去背课本，刷考研题，但是👴一看ppt就想起我们敬爱的《计算机组成原理》课的任课老师，丐哥反复强调的至理名言：“听不懂的举手（无停顿）都没举手，都听懂了，非常好。”本人十分钦佩丐哥老师对幽默感的独特理解。&lt;br>&lt;/p>
&lt;p>&lt;em>（但是特此声明：本人不了解、不认同其关于&amp;quot;5G是个几把&amp;quot;，&amp;ldquo;高晓松很nb这个人&amp;rdquo;，&amp;ldquo;钱=浪漫&amp;quot;等议题的看法）&lt;/em>&lt;br>&lt;/p>
&lt;p>而且👴这人很怪，课本上的重点，不好玩；选做的实验，好玩！哎就是玩，怪不得卷不过别人，你也配卷？滚去考研吧。&lt;br>&lt;/p>
&lt;p>众所周知，计算机学生的本科生涯，如果能做到在自己设计的CPU上运行自己写的操作系统并用自己写的编译器跑代码，那就非常成功了。👴差不多，👴能在自己搜的代码上写自己的注释并用自己的电脑截图，都是三个&amp;quot;自己&amp;rdquo;。那么今天给大家爆个啥捏，流水线奥。&lt;br>&lt;/p>
&lt;h2 id="-用计算机造计算机">🔧 “用”计算机→“造”计算机&lt;/h2>
&lt;p>上回书说到（#TODO:: CSAPP大篇），汇编器(as)让我们得到了机器能看懂的比特流，最后一步只需要连接器(ld)将其和其他调用一起载入内存。这回答了程序如何在CPU这个平台上运行的问题，然而一个更基本的问题是，这个现有的平台是如何实现的？一个粗略的认识是，我们知道这些足以实现CPU的复杂的逻辑，其最小单元总对应到简单的诸如逻辑门上面，但是落实到真正的物理实现之上，如何使效率最高？功耗最小？这些问题所跨越的复杂度的量级依然是一片巨大的迷雾。照亮这片迷雾的知识，大概隶属于IC学科。&lt;br>&lt;/p>
&lt;p>However，作为CS专业而不是IC专业，我们的目标仅在于理解所谓“组成原理”。在IC产业的复杂度规模数轴上，向下是专有芯片（又称嵌入式？），功能专用，规模较小；向上是通用芯片，即手机电脑等的核心，其难度不言而喻。位于中间的FPGA则既兼顾了自由度也考虑了速度，因此，这玩意能满足CS本科教学的需要（主要是便宜耐操）。&lt;br>&lt;/p>
&lt;h2 id="高贵的ic工程师都用啥轮子">🔮高贵的IC工程师都用啥轮子&lt;/h2>
&lt;p>Vivado是一个FPGA集成设计平台（也算一个EDA？），他主界面左侧的工作流窗口很好的概括了利用FPGA开发的基本流程。即&lt;/p>
&lt;ul>
&lt;li>编写设计源码(Source)：使用Verilog语言编写逻辑或引入IP
&lt;ul>
&lt;li>设计仿真模拟(Simulation)：通过观察仿真波形图和编写testbench来对设计进行debug
&lt;ul>
&lt;li>综合(Systhesis)门级网表：从RTL级描述降维到门级网表
&lt;ul>
&lt;li>生成(Implementation)布局布线：根据管脚约束，将依然是虚拟的门级连线落实为实际的线路
&lt;ul>
&lt;li>进行硬件编程(program)：生成比特流并写入目标设备&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623373911775.png"
width="284"
height="898"
srcset="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623373911775_huf28bb0831bd4f5e30206b091a37b5db9_21335_480x0_resize_box_3.png 480w, https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623373911775_huf28bb0831bd4f5e30206b091a37b5db9_21335_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="31"
data-flex-basis="75px"
>&lt;/p>
&lt;blockquote>
&lt;p>名词解释：
IC：集成电路
FPGA：现场可编程门阵列
Verilog：一种硬件描述语言，语法涵盖了自顶向下五个抽象层面：系统级、算法级、RTL级、门级、开关级。
RTL：寄存器传输级。一般使用最多的就是RTL级。
IP：Intellectual Property内核模块，可以理解为将代码封装为函数。分为，软IP内核(soft IP core)，固IP内核(firm IP core)和硬IP内核(hard IP core)3个层次，相当于集成电路的毛坯、半成品和成品。
SoC：片上系统，大概是芯片及其装载的第一层软件接口的集合，很宽泛的概念。
EDA：电子设计自动化。&lt;/p>
&lt;/blockquote>
&lt;p>由此，我们可以大致探清了这片迷雾，CPU的设计如何从高抽象层次的逻辑，梳理成最底层的逻辑门，再实现为小小的芯片。那么我们有了轮子，要造一个CPU，还要确定目标指令集。由于本项目由龙芯公司赞助，那必然要选MIPS了。&lt;/p>
&lt;h2 id="mips指令集格式">📌MIPS指令集格式&lt;/h2>
&lt;p>啥叫指令集呢，学过几种语言就不难理解。高级程序语言规定每个ascii码的组合所对应的含义，指令集规定0和1的组合所对应的寄存器，ALU的各种信号。MIPS指令集从属于RISC系列，最基本的指令有31条。&lt;br>&lt;/p>
&lt;p>//讲到这里本应该打个表展示31条指令，但是👴懒得打了。&lt;br>&lt;/p>
&lt;p>Vivado中，.coe文件用于初始化IP核，本实验给出的.coe文件中存放了几条指令，不过是16进制数字，写个小脚本打印成可读的形式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># mips_dump.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hex_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bin_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)),&lt;/span>&lt;span class="n">hex_list&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># bin_code_list = [&amp;#34;{:0&amp;gt;32}&amp;#34;.format(i[2:],&amp;#39;b&amp;#39;) for i in bin_list]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bin_code_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zfill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">bin_list&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">IType_op_dict&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;001000&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;addi&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;001001&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;addiu&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;001100&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;ori&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;001101&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;xori&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;001111&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;lui&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100011&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;lw&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;101011&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;sw&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;000100&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;beq&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;000101&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;bne&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;001010&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;slti&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;001011&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;sltiu&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">RType_func_dict&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100000&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;add&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100001&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;addu&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100010&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;sub&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100011&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;subu&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100100&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;and&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100101&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;or&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100110&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;xor&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;100111&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;nor&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;101010&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;slt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;101011&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;sltu&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;000000&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;sll&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;000010&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;srl&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;000011&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;sra&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;000100&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;sllv&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;000110&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;srlv&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;000111&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;srav&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;001000&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s1">&amp;#39;jr&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">f_hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ori&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># bin-&amp;gt;hex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;0x&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ori&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zfill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">f_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ori&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># print register num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;$&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ori&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zfill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">code_dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">inst&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ljust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">f_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]),&lt;/span>&lt;span class="n">f_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]),&lt;/span>&lt;span class="n">f_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]),&lt;/span>&lt;span class="n">f_hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="nb">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;I&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ljust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">f_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]),&lt;/span>&lt;span class="n">f_reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]),&lt;/span>&lt;span class="n">f_hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ljust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s1">&amp;#39;0x&amp;#39;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zfill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">assembly_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">bin_code_list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># public field&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">op&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;000000&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># R-Type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">21&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shamt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">21&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assembly_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code_dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">RType_func_dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">rt&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">rd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">shamt&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">op&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;000010&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;000011&amp;#39;&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="c1"># J-Type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assembly_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code_dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;J&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;j&amp;#39;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># I-Type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">imm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assembly_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code_dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;I&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">IType_op_dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">imm&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assembly_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;***** decode error! *****&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">head&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;+---hexdump----|--------- assembly ---------+&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_code_list&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;|&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="n">f_hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="n">hex_list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34; | &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="n">assembly_list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ljust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; |&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;+&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">43&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;+&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>打印出来👴傻了，怎么还有不在31条范围里的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+---hexdump----|--------- assembly ---------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x00 24010001 | addiu $00, $04, 0x00000001 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x04 00011100 | sll $00, $01, $02, 0x04 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x08 00411821 | addu $02, $01, $03, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x0c 00022082 | srl $00, $02, $04, 0x02 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x10 28990005 | slti $09, $36, 0x00000005 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x14 07210010 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x18 00642823 | subu $03, $04, $05, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x1c AC050014 | sw $00, $20, 0x00000014 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x20 00A23027 | nor $05, $02, $06, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x24 00C33825 | or $06, $03, $07, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x28 00E64026 | xor $07, $06, $08, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x2c AC08001C | sw $00, $32, 0x0000001c |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x30 11030002 | beq $16, $12, 0x00000002 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x34 00C7482A | slt $06, $07, $09, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x38 24010008 | addiu $00, $04, 0x00000008 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x3c 8C2A0014 | lw $02, $40, 0x00000014 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x40 15450004 | bne $20, $20, 0x00000004 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x44 00415824 | and $02, $01, $11, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x48 AC2B001C | sw $02, $44, 0x0000001c |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x4c AC240010 | sw $02, $16, 0x00000010 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x50 0C000019 | j 0x00000019 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x54 3C0C000C | lui $00, $48, 0x0000000c |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x58 004CD007 | srav $02, $12, $26, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x5c 003AD804 | sllv $01, $26, $27, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x60 0360F809 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x64 A07A0005 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x68 0063682B | sltu $03, $03, $13, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x6c 1DA00003 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x70 00867004 | sllv $04, $06, $14, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x74 000E7883 | sra $00, $14, $15, 0x02 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x78 002F8006 | srlv $01, $15, $16, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x7c 1A000008 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x80 002F8007 | srav $01, $15, $16, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x84 240B008C | addiu $00, $44, 0x0000008c |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x88 06000006 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x8c 8D5C0003 | lw $21, $48, 0x00000003 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x90 179D0007 | bne $57, $52, 0x00000007 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x94 A0AF0008 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x98 80B20008 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0x9c 90B30008 | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0xa0 2DF8FFFF | sltiu $31, $35, 0x00003fff |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0xa4 0185E825 | or $12, $05, $29, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0xa8 01600008 | jr $11, $00, $00, 0x00 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0xac 31F4FFFF | ori $31, $19, 0x00003fff |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0xb0 35F5FFFF | xori $31, $23, 0x00003fff |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0xb4 39F6FFFF | ***** decode error! ***** |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|0xb8 08000000 | j 0x00000000 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------------------------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>总之，代码都给你了，下面给出一个vivado实验的完整流程，不全面，但是都是踩坑经验。&lt;/p>
&lt;h2 id="vivado使用">🆒Vivado使用&lt;/h2>
&lt;p>本流程环境：Vivado 2020.2&lt;br>
开发板型号：LS-CPU-EXB-1&lt;br>&lt;/p>
&lt;h3 id="创建项目">创建项目&lt;/h3>
&lt;p>下一步，下一步，下一步，，，确认。
这一步只需要注意选器件，一定要选对。否则有可能在Implementation遇到“端口电平不匹配”“端口数量不足”等硬件问题。当然，有可能型号相近的性能规格也差不多，这属于玄学问题了。实验书上选择的的型号应该是“xc7a200tfbg676-2”，但是👴用的是“xc7a200tfbv676-2”也能成功写入比特流。&lt;/p>
&lt;h3 id="编写代码并仿真">编写代码并仿真&lt;/h3>
&lt;p>本实验的代码大多来自“2016-04-14”，那就是龙芯公司给的源代码。在该系列代码中有一处bug，位于“单周期CPU实验”的single_cycle_cpu.v中。214行，&lt;code>resetn&lt;/code>应该为&lt;code>{4{resetn}}&lt;/code>，写使能位宽应为为4。
&lt;img src="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379687932.png"
width="1127"
height="171"
srcset="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379687932_hufe86cef61ae65608cb32f2b7a6318565_35328_480x0_resize_box_3.png 480w, https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379687932_hufe86cef61ae65608cb32f2b7a6318565_35328_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="659"
data-flex-basis="1581px"
>&lt;/p>
&lt;p>下面讲解一下项目结构，所有实验都是类似的：
&lt;img src="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623374928604.png"
width="685"
height="892"
srcset="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623374928604_hu98bc94ba53dca30899515e8f1ad871e0_210347_480x0_resize_box_3.png 480w, https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623374928604_hu98bc94ba53dca30899515e8f1ad871e0_210347_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="184px"
>
三个顶层文件夹分别对应Add Source里的三类源文件：添加设计，添加仿真，添加约束。如果不需要上板，只完成仿真，那么只需要添加设计（几个.v），添加仿真（testbench.v/tb.v）就足够了，xxx_display.v也是上板需要的故而可以忽略。（实际上，图中我用箭头标记的都用不到）。&lt;/p>
&lt;p>编写tb，无非是给tb里声明为input的信号赋值，还可以使用&lt;code>#xx&lt;/code>，让tb等待一段时间。&lt;/p>
&lt;p>点击Run Simulation，等一会就能看到波形图。波形图有三种颜色：&lt;/p>
&lt;ul>
&lt;li>绿色代表信号正常正常；&lt;/li>
&lt;li>红色的X代表信号不确定；&lt;/li>
&lt;li>蓝色的Z代表信号休眠。&lt;/li>
&lt;/ul>
&lt;p>一般遇到红X，都是未初始化问题。蓝Z大概是没有模块调用这些信号。Vivado波形图的操作极其难用，这里介绍一个相对好用的操作：左键从左向右水平划，会直接缩放到鼠标滑过的这一段。右键选择进制等操作略。&lt;/p>
&lt;p>&lt;img src="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623378896380.png"
width="1000"
height="757"
srcset="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623378896380_hue25177b2e4edfc44898f590de0dbab08_40422_480x0_resize_box_3.png 480w, https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623378896380_hue25177b2e4edfc44898f590de0dbab08_40422_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>仿真需要注意的问题：&lt;/p>
&lt;ul>
&lt;li>如果文件没问题，模块调用层次会被自动解析从而呈现成一棵树，而不是好几个顶层文件。&lt;/li>
&lt;li>注意set as top，应该设为根部模块（调用其他模块的）和tb
&lt;ul>
&lt;li>//如果设错了可能在Implementation会出现“端口未赋初值”的报错。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中文乱码是经典字符集问题，有可能在换行处导致语法错误。建议统一换成utf-8。
&lt;ul>
&lt;li>简单解决方法：从vscode里复制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="引入ip核">引入IP核&lt;/h3>
&lt;p>对于流水线CPU，data_ram和inst_rom需要同步写，自己实现比较复杂，故直接实例化封装好的内存块IP。如何引入？首先说明几种文件格式：&lt;/p>
&lt;ul>
&lt;li>.dcp 原意为checkpoints文件，是一种加密压缩文件。用于封装模块方便调用，但对版本要求极其敏感。&lt;/li>
&lt;li>.xci/.xcix IP核配置文件，本质是一个xml。是Vivado在新版本提倡使用xci而不是dcp。&lt;/li>
&lt;li>.xdc 管脚约束文件。在Implementation用到，此处按下不表。&lt;/li>
&lt;/ul>
&lt;p>这几种文件格式都是可以直接Add Source添加进来的。实验老师同时提供dcp和xci文件，添加dcp崩屎了，原因估计如上。添加xci之后，提示我将IP更新为core cointainer的形式&lt;/p>
&lt;p>&lt;img src="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623377228417.png"
width="669"
height="513"
srcset="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623377228417_hu3723a569f5da7a4a86a5166afb1cfa77_35011_480x0_resize_box_3.png 480w, https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623377228417_hu3723a569f5da7a4a86a5166afb1cfa77_35011_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;p>更新就完了。然后需要等一会，IP还要执行一步synth，这段时间里IP属于锁住的状态，不能修改配置。&lt;/p>
&lt;p>&lt;img src="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623377562565.png"
width="429"
height="113"
srcset="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623377562565_hu20944bb791fcafc19453988e909e4c86_6875_480x0_resize_box_3.png 480w, https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623377562565_hu20944bb791fcafc19453988e909e4c86_6875_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="379"
data-flex-basis="911px"
>&lt;/p>
&lt;p>注意更换器件后，IP核都会锁住。这表示IP的配置和当前环境不匹配。对所有IP锁住的问题，只需要点击菜单栏Reports→Reports IP Status，然后点upgrade即可解除锁定。&lt;/p>
&lt;h3 id="我直接上板">我直接上板&lt;/h3>
&lt;p>直接点生成比特流，会一步步的按工作流向下运行，等待几分钟就能愉快的收获你的报错了！&lt;/p>
&lt;p>&lt;img src="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379096063.jpg"
width="1440"
height="1080"
srcset="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379096063_hu89db98ea66f840c7603fe283c7e8a11b_471271_480x0_resize_q75_box.jpg 480w, https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379096063_hu89db98ea66f840c7603fe283c7e8a11b_471271_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>在把上文提到的坑都踩过一遍之后，终于没有critical warning，泪目。&lt;/p>
&lt;p>但是此时实验课已经结束了，👴偷溜到没人的实验室，并留下以下珍贵画面&lt;/p>
&lt;p>&lt;img src="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379266894.jpg"
width="2340"
height="1080"
srcset="https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379266894_hu51bb5a7a2a7c819eb623949b43a1f068_1273620_480x0_resize_q75_box.jpg 480w, https://lonelyuan.github.io/HugoBlog/HugoBlog/p/%E5%9F%BA%E4%BA%8Evivado%E7%9A%84%E5%9F%BA%E4%BA%8Efpga%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8Emips%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B3%A8%E9%87%8A/1623379266894_hu51bb5a7a2a7c819eb623949b43a1f068_1273620_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;p>然后👴发现data_ram写入失败。但是👴没时间搞了，👴还是滚去复习课本吧。&lt;/p>
&lt;h2 id="多周期流水线cpu原理">🗿多周期流水线CPU原理&lt;/h2>
&lt;p>最后，继续复习计组。&lt;br>&lt;/p></description></item><item><title>CSAPP - Bomblab</title><link>https://lonelyuan.github.io/HugoBlog/p/csapp-bomblab/</link><pubDate>Thu, 27 Feb 2020 22:43:31 +0000</pubDate><guid>https://lonelyuan.github.io/HugoBlog/p/csapp-bomblab/</guid><description>&lt;h1 id="csappbomblab">CSAPP：Bomblab&lt;/h1>
&lt;p>逆向的传统艺能拆炸弹，👴的青春回来了。&lt;/p>
&lt;p>文件结构：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">bomb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── README
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── bomb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── bomb.c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只有一个程序，给的源码基本没用，我们要用逆向工程的方法理解程序，找到正确的字符串。&lt;/p>
&lt;p>讲反汇编器的结果导出：&lt;code>objdump -d bomb &amp;gt; bomb.txt&lt;/code>&lt;/p>
&lt;p>可以看到有6关，每一关接受一个字符串，若跳转到explode_bomb函数，则答案错误。&lt;/p>
&lt;h3 id="第一关字符串比较">第一关：字符串比较&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0000000000400ee0 &amp;lt;phase_1&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ee0: 48 83 ec 08 sub $0x8,%rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ee4: be 00 24 40 00 mov $0x402400,%esi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ee9: e8 4a 04 00 00 callq 401338 &amp;lt;strings_not_equal&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>逻辑是直接比较字符串是否相等，不过&lt;code>$0x402400&lt;/code>不是程序内地址，说明答案被藏在了我们看不到的内存位置。&lt;/p>
&lt;p>于是上GDB，在&amp;lt;phase_1&amp;gt;下断点，&lt;code>stepi&lt;/code>单步执行到callq之前，查看寄存器:&lt;code>x\s $esi&lt;/code>，得到答案。（每台电脑的答案都不一样）&lt;/p>
&lt;h3 id="第二关循环">第二关：循环&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0000000000400efc &amp;lt;phase_2&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400efc: 55 push %rbp //压栈
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400efd: 53 push %rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400efe: 48 83 ec 28 sub $0x28,%rsp //开辟栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f02: 48 89 e6 mov %rsp,%rsi//栈顶地址→rsi参数二
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f05: e8 52 05 00 00 callq 40145c &amp;lt;read_six_numbers&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如函数名所示，读6个数字，为什么是6呢，大概是因为存放参数的寄存器总共有6个吧。（然而并不）&lt;/p>
&lt;p>可以看到调用前开辟了0x28的栈上空间，足够存放6个整数。栈顶地址被存入%rsi，以此传递该地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">000000000040145c &amp;lt;read_six_numbers&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//%rsi:父进程&amp;lt;phase_2&amp;gt;的栈顶地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40145c: 48 83 ec 18 sub $0x18,%rsp //栈帧长24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401460: 48 89 f2 mov %rsi,%rdx //rsi→参数三：num1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401463: 48 8d 4e 04 lea 0x4(%rsi),%rcx //rsi+4→参数四：num2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401467: 48 8d 46 14 lea 0x14(%rsi),%rax //rsi+20→rax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40146b: 48 89 44 24 08 mov %rax,0x8(%rsp) //rax→栈顶+8：num6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401470: 48 8d 46 10 lea 0x10(%rsi),%rax //rsi+16→rax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401474: 48 89 04 24 mov %rax,(%rsp) //rax→栈顶：num5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401478: 4c 8d 4e 0c lea 0xc(%rsi),%r9 //rsi+12→参数六：num4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40147c: 4c 8d 46 08 lea 0x8(%rsi),%r8 //rsi+8→参数五：num3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401480: be c3 25 40 00 mov $0x4025c3,%esi//0x4025c3:&amp;#34;%d %d %d %d %d %d&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401485: b8 00 00 00 00 mov $0x0,%eax //返回值赋0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40148a: e8 61 f7 ff ff callq 400bf0 &amp;lt;__isoc99_sscanf@plt&amp;gt; //sscanf()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40148f: 83 f8 05 cmp $0x5,%eax //返回值和5比较，即输入6个值才能通过
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401492: 7f 05 jg 401499 &amp;lt;read_six_numbers+0x3d&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401494: e8 a1 ff ff ff callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401499: 48 83 c4 18 add $0x18,%rsp //出栈
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40149d: c3 retq
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看&amp;lt;read_six_numbers&amp;gt;，%rsi中的地址以4为步长被分别储存。猜测sscanf函数的返回值中，第一个表示输入参数的个数；程序要求6个输入，加上rsi被占用，于是多的两个存入栈中。且sscanf函数的返回值按参数寄存器（多的地址在栈上）存放的地址传输，即输入值被按顺序存入phase_2的栈帧中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> 400f0a: 83 3c 24 01 cmpl $0x1,(%rsp) //栈顶位置取双字和1比较
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f0e: 74 20 je 400f30 &amp;lt;phase_2+0x34&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f10: e8 25 05 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f17: 8b 43 fc mov -0x4(%rbx),%eax //循环头：num1→eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f1a: 01 c0 add %eax,%eax // eax*2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f1c: 39 03 cmp %eax,(%rbx) //和num2比较
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f1e: 74 05 je 400f25 &amp;lt;phase_2+0x29&amp;gt; //相等才通过
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f20: e8 15 05 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f25: 48 83 c3 04 add $0x4,%rbx //rbx增4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f29: 48 39 eb cmp %rbp,%rbx //rbx和rsp+24比较，相等则跳出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f2c: 75 e9 jne 400f17 &amp;lt;phase_2+0x1b&amp;gt; //循环尾，循环共6轮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f2e: eb 0c jmp 400f3c &amp;lt;phase_2+0x40&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f30: 48 8d 5c 24 04 lea 0x4(%rsp),%rbx //num2地址→rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f35: 48 8d 6c 24 18 lea 0x18(%rsp),%rbp//rbx地址→rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f3a: eb db jmp 400f17 &amp;lt;phase_2+0x1b&amp;gt; //开始循环
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>跳出&amp;lt;read_six_numbers&amp;gt;后，首先检查栈顶地址指向的值是否为1，即第一个数字是1。&lt;/p>
&lt;p>之后进入循环，循环体每次都会把当前数字*2和下一个数字比较，即每个数字都是前一个的二倍；%rbx作计数变量，共循环6次。答案呼之欲出。&lt;/p>
&lt;h3 id="第三关分支">第三关：分支&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0000000000400f43 &amp;lt;phase_3&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f43: 48 83 ec 18 sub $0x18,%rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f47: 48 8d 4c 24 0c lea 0xc(%rsp),%rcx //rsp+12→rcx: mun2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f4c: 48 8d 54 24 08 lea 0x8(%rsp),%rdx //rsp+8→rdx: mun1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f51: be cf 25 40 00 mov $0x4025cf,%esi //0x4025cf: &amp;#34;%d %d&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f56: b8 00 00 00 00 mov $0x0,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f5b: e8 90 fc ff ff callq 400bf0 &amp;lt;__isoc99_sscanf@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f60: 83 f8 01 cmp $0x1,%eax //不少于一个输入
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f63: 7f 05 jg 400f6a &amp;lt;phase_3+0x27&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f65: e8 d0 04 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f6a: 83 7c 24 08 07 cmpl $0x7,0x8(%rsp) //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f6f: 77 3c ja 400fad &amp;lt;phase_3+0x6a&amp;gt; //超过7则爆炸
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f71: 8b 44 24 08 mov 0x8(%rsp),%eax //取num1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400f75: ff 24 c5 70 24 40 00 jmpq *0x402470(,%rax,8)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此处&lt;code>*&lt;/code>相当于c中的取地址符&lt;code>&amp;amp;&lt;/code>，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">400f7c: b8 cf 00 00 00 mov $0xcf,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400f81: eb 3b jmp 400fbe &amp;lt;phase_3+0x7b&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">······
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有7段形式重复的代码，结合第一个数字不能大于7，猜测这里是switch型结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">400fad: e8 88 04 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400fb2: b8 00 00 00 00 mov $0x0,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400fb7: eb 05 jmp 400fbe &amp;lt;phase_3+0x7b&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400fb9: b8 37 01 00 00 mov $0x137,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400fbe: 3b 44 24 0c cmp 0xc(%rsp),%eax //比较num2和eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400fc2: 74 05 je 400fc9 &amp;lt;phase_3+0x86&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400fc4: e8 71 04 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400fc9: 48 83 c4 18 add $0x18,%rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">400fcd: c3 retq
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第二个数字是%eax的值，由第一个数决定。故答案有7个。&lt;/p>
&lt;h3 id="第四关递归">第四关：递归&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">000000000040100c &amp;lt;phase_4&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401029: 83 f8 02 cmp $0x2,%eax //只能有2参数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40102c: 75 07 jne 401035 &amp;lt;phase_4+0x29&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40102e: 83 7c 24 08 0e cmpl $0xe,0x8(%rsp) //0 &amp;lt;= num1 &amp;lt;= 14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401033: 76 05 jbe 40103a &amp;lt;phase_4+0x2e&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401035: e8 00 04 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40103a: ba 0e 00 00 00 mov $0xe,%edx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40103f: be 00 00 00 00 mov $0x0,%esi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401044: 8b 7c 24 08 mov 0x8(%rsp),%edi //num1→edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401048: e8 81 ff ff ff callq 400fce &amp;lt;func4&amp;gt; //
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输入规则和上一关一样，第一个数需在0到14之间（cmpl只能用于无符号数？）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0000000000400fce &amp;lt;func4&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//首次调用时：%eax:0x2 %ebx:0 %ecx:0 %edx:0xe %esi:0x0 %edi:num1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fce: 48 83 ec 08 sub $0x8,%rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fd2: 89 d0 mov %edx,%eax //eax:14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fd4: 29 f0 sub %esi,%eax //eax:14-0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fd6: 89 c1 mov %eax,%ecx //ecx:14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fd8: c1 e9 1f shr $0x1f,%ecx //ecx:0 //逻辑右移31，即取符号位。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fdb: 01 c8 add %ecx,%eax //eax:14+0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fdd: d1 f8 sar %eax //算术右移1位？eax:14/2=7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fdf: 8d 0c 30 lea (%rax,%rsi,1),%ecx //ecx:7+0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fe2: 39 f9 cmp %edi,%ecx //比较num1和7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fe4: 7e 0c jle 400ff2 &amp;lt;func4+0x24&amp;gt; //不大于→r17
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fe6: 8d 51 ff lea -0x1(%rcx),%edx //edx:ecx-1=6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fe9: e8 e0 ff ff ff callq 400fce &amp;lt;func4&amp;gt; //递归→r3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400fee: 01 c0 add %eax,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ff0: eb 15 jmp 401007 &amp;lt;func4+0x39&amp;gt; //跳出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ff2: b8 00 00 00 00 mov $0x0,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ff7: 39 f9 cmp %edi,%ecx //比较num1和7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ff9: 7d 0c jge 401007 &amp;lt;func4+0x39&amp;gt; //不小于
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ffb: 8d 71 01 lea 0x1(%rcx),%esi //esi:ecx+1=8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 400ffe: e8 cb ff ff ff callq 400fce &amp;lt;func4&amp;gt; //递归→r3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401003: 8d 44 00 01 lea 0x1(%rax,%rax,1),%eax //eax=2*eax+1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401007: 48 83 c4 08 add $0x8,%rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40100b: c3 retq
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前面一通算术操作，后面设计了递归。&lt;/p>
&lt;p>这里一步移位操作看起来像是取符号位，但是输入一定大于0，符号位是0，所以这个操作意义何在？&lt;/p>
&lt;p>人肉IDA走起：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">fun4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nf">fun4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nf">fun4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">fun4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个数设为7可避免递归调用，但返回值不是0，不符合。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">40104d: 85 c0 test %eax,%eax //eax=0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">40104f: 75 07 jne 401058 &amp;lt;phase_4+0x4c&amp;gt;//不等于0爆炸
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">401051: 83 7c 24 0c 00 cmpl $0x0,0xc(%rsp) //mun2和0比较？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">401056: 74 05 je 40105d &amp;lt;phase_4+0x51&amp;gt;//不等于0爆炸
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">401058: e8 dd 03 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">40105d: 48 83 c4 18 add $0x18,%rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">401061: c3 retq
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到&lt;func4>的返回值和num2皆需为0，则num2确定。&lt;/p>
&lt;p>大不了爆破呗，索性试了1次就成了。emm&lt;/p>
&lt;p>【后面三关施工中。。。】&lt;/p>
&lt;h3 id="第五关">第五关&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0000000000401062 &amp;lt;phase_5&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401062: 53 push %rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401063: 48 83 ec 20 sub $0x20,%rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401067: 48 89 fb mov %rdi,%rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40106a: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax //???
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401073: 48 89 44 24 18 mov %rax,0x18(%rsp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401078: 31 c0 xor %eax,%eax //eax:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40107a: e8 9c 02 00 00 callq 40131b &amp;lt;string_length&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40107f: 83 f8 06 cmp $0x6,%eax //输入长度为6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401082: 74 4e je 4010d2 &amp;lt;phase_5+0x70&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401084: e8 b1 03 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401089: eb 47 jmp 4010d2 &amp;lt;phase_5+0x70&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40108b: 0f b6 0c 03 movzbl (%rbx,%rax,1),%ecx //循环头。新指令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40108f: 88 0c 24 mov %cl,(%rsp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401092: 48 8b 14 24 mov (%rsp),%rdx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401096: 83 e2 0f and $0xf,%edx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 401099: 0f b6 92 b0 24 40 00 movzbl 0x4024b0(%rdx),%edx //？？？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010a0: 88 54 04 10 mov %dl,0x10(%rsp,%rax,1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010a4: 48 83 c0 01 add $0x1,%rax //计数变量rax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010a8: 48 83 f8 06 cmp $0x6,%rax //循环6轮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010ac: 75 dd jne 40108b &amp;lt;phase_5+0x29&amp;gt; //循环尾
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010ae: c6 44 24 16 00 movb $0x0,0x16(%rsp)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010b3: be 5e 24 40 00 mov $0x40245e,%esi //？？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010b8: 48 8d 7c 24 10 lea 0x10(%rsp),%rdi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010bd: e8 76 02 00 00 callq 401338 &amp;lt;strings_not_equal&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010c2: 85 c0 test %eax,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010c4: 74 13 je 4010d9 &amp;lt;phase_5+0x77&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010c6: e8 6f 03 00 00 callq 40143a &amp;lt;explode_bomb&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010cb: 0f 1f 44 00 00 nopl 0x0(%rax,%rax,1) //？？？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010d0: eb 07 jmp 4010d9 &amp;lt;phase_5+0x77&amp;gt;//跳出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010d2: b8 00 00 00 00 mov $0x0,%eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010d7: eb b2 jmp 40108b &amp;lt;phase_5+0x29&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010d9: 48 8b 44 24 18 mov 0x18(%rsp),%rax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010de: 64 48 33 04 25 28 00 xor %fs:0x28,%rax //？？？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010e7: 74 05 je 4010ee &amp;lt;phase_5+0x8c&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010e9: e8 42 fa ff ff callq 400b30 &amp;lt;__stack_chk_fail@plt&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010ee: 48 83 c4 20 add $0x20,%rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010f2: 5b pop %rbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 4010f3: c3 retq
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第六关">第六关&lt;/h3>
&lt;h3 id="隐藏关">隐藏关&lt;/h3>
&lt;p>隐藏关藏在每一关的后面，&lt;/p>
&lt;h2 id="gdb使用">GDB使用：&lt;/h2>
&lt;p>基础：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">q : quit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">h : help
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">file prog//加载程序，也可作为gdb命令的参数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">r : run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k : kill
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>断点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">b : breakpoints break
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - func_name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - *0x400522
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;amp;var
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - main.c:100//源代码断点，运行前即可
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - if con//条件断点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">w : watch //观察对象变化时断点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">d : delete
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - b n
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">disable b n
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">c : continue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f : finish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stepi n
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nexti
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set args ./a.txt //从文件读取输入
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>检查代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">disas //展示汇编
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - funcname
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 0x400000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">edit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>检查数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">x : examine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">p : print
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">格式控制：/[n][f][u]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - n:内存单元个数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - f:显示格式：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - x(hex) 按十六进制格式显示变量。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - d(decimal) 按十进制格式显示变量。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - u(unsigned decimal) 按十进制格式显示无符号整型。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - o(octal) 按八进制格式显示变量。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - t(binary) 按二进制格式显示变量。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - a(address) 按十六进制格式显示变量。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - c(char) 按字符格式显示变量。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - f(float) 按浮点数格式显示变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - u:单元长度（按字节）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">i : info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - r : registers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - b [n]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - $rsp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>堆栈：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">bt : backtrace//显示堆栈
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>CSAPP - Datalab</title><link>https://lonelyuan.github.io/HugoBlog/p/csapp-datalab/</link><pubDate>Tue, 21 Jan 2020 00:00:03 +0000</pubDate><guid>https://lonelyuan.github.io/HugoBlog/p/csapp-datalab/</guid><description>&lt;p>第一个lab，关于位运算。通过受限制的c语言编程实现函数功能。这些函数都是非常基本的功能，正如书名《CS:APP》所示，启发我们从程序员视角理解计算机的深层更深层。&lt;/p>
&lt;p>README中说明了项目结构。直接读&lt;code>bits.c&lt;/code>，只需要填充其中的函数。每次测试程序都要先make一下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;span class="lnt">242
&lt;/span>&lt;span class="lnt">243
&lt;/span>&lt;span class="lnt">244
&lt;/span>&lt;span class="lnt">245
&lt;/span>&lt;span class="lnt">246
&lt;/span>&lt;span class="lnt">247
&lt;/span>&lt;span class="lnt">248
&lt;/span>&lt;span class="lnt">249
&lt;/span>&lt;span class="lnt">250
&lt;/span>&lt;span class="lnt">251
&lt;/span>&lt;span class="lnt">252
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * bitXor - x^y using only ~ and &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Example: bitXor(4, 5) = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ~ &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 14
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">bitXor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// x^y
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// = (~x&amp;amp;y)|(x&amp;amp;~y) // 异或公式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// = ~(~(~x&amp;amp;y)&amp;amp;~(x&amp;amp;~y)) // 德摩根律，ops: 8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// = ~((x|~y)&amp;amp;(~x|y)) // 德摩根律
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// = ~(x&amp;amp;~x|x&amp;amp;y|y&amp;amp;~y|~x&amp;amp;~y) // 分配律
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// = ~(x&amp;amp;y|~x&amp;amp;~y) // 吸收率
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;~&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;amp;~&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 德摩根律，ops: 7
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * tmin - return minimum two&amp;#39;s complement integer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">tmin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// For negative numbers: complement = inverse + 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">31&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// tmin=0x80, tmax=0x7f
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 为什么是补码？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 为了方便计算机处理，我们希望负数和其相反数相加之后自然的溢出得0。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// x+~x=1, 再加1则溢出得0。因此补码=反码+1。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 同时符号位天然的蕴含在最高位上，这有许多好处。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 其一是正数的表现和无符号整数一致。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 其二是由于＋0和-0一致，相比显式符号位能多表示一个数字，范围是[-2^(n-1),2^(n-1)-1]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * isTmax - returns 1 if x is the maximum, two&amp;#39;s complement number,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * and 0 otherwise
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ! ~ &amp;amp; ^ | +
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">isTmax&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ! 逻辑取反，仅全0返回1，其余情况都返回0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ~ 按位取反
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 补码相反数 = 反码 + 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 两个特例：~tmin+1=tmin; ~0+1=0. 相反数为自身
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 得到几个函数：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// negate(x) (~x+1) // 取相反数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// iszero(x) (!!x) // 仅当!!0=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// equal(x,y) !(x^y) // 判断相等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ~tmax=tmin, 转换为筛选tmin和0xff
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 因此答案为 equal(~x,negate(~x)) &amp;amp; iszero(~x)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!!~&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ops: 8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * allOddBits - return 1 if all odd-numbered bits in word set to 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * where bits are numbered from 0 (least significant) to 31 (most significant)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 12
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">allOddBits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 掩码: x &amp;amp; 0b1111, 结果相当于只取了x的后4位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 奇数位全为1，使用掩码0xAAAAAAAA提取奇数位，再使用equal(x,0xAAAAAAAA)判断即可
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xAA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mask&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mask&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mask&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">mask&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ops: 7
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * negate - return -x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Example: negate(1) = -1.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">negate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * isAsciiDigit - return 1 if 0x30 &amp;lt;= x &amp;lt;= 0x39 (ASCII codes for characters &amp;#39;0&amp;#39; to &amp;#39;9&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Example: isAsciiDigit(0x35) = 1.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * isAsciiDigit(0x3a) = 0.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * isAsciiDigit(0x05) = 0.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 15
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">isAsciiDigit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// x &amp;gt; y
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// =&amp;gt; x+(~y+1) &amp;gt; 0 // x+(-y)&amp;gt;0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// =&amp;gt; !(x+(~y+1) &amp;gt;&amp;gt; 31) // 使用符号位判断&amp;gt;0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 得到比较函数：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// gpos(x, y) !(x+(~y+1) &amp;gt;&amp;gt; 31)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 带入即可 !((0x39 + ~x+1)&amp;gt;&amp;gt;31) &amp;amp; !((x + ~0x30+1)&amp;gt;&amp;gt;31) // ops: 11
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">0x3A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="mh">0x30&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ops: 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * conditional - same as x ? y : z
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Example: conditional(2,4,5) = 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 16
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">conditional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 或运算两侧不同时为1即可构成条件判断，使用掩码控制输出内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 错误做法：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// int mask = x &amp;gt;&amp;gt; 31; // 算数右移取符号位填充全部位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// x ? y : z 对x是逻辑判断不是算术判断
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mask&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="o">~!&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 仅0返回1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">mask&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mask&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="c1">// ops: 7
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * isLessOrEqual - if x &amp;lt;= y then return 1, else return 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Example: isLessOrEqual(4,5) = 1.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 24
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">isLessOrEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// gpos(x, y) 在跨符号的情况下失灵，增加两种情况判断:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 1. x=y：返回1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 2. x和y不同符号：x为负时一定小于，返回1，x符号位也是1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 因此答案为 equal(signx,signy) ? (gpos(y,x) | equal(x,y)) : signx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">signx&lt;/span>&lt;span class="o">=!!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">signy&lt;/span>&lt;span class="o">=!!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">signx&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">signy&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">mask&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)))&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mask&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">signx&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ops: 19
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * logicalNeg - implement the ! operator, using all of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * the legal operators except !
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Examples: logicalNeg(3) = 0, logicalNeg(0) = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 12
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">logicalNeg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 仅0返回1，其余返回0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 还是借助两个特例：~tmin+1=tmin; ~0+1=0. 相反数为自身
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 答案为 equal(x,~x+1) &amp;amp; !equal(x,tmin)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// !(x^0) &amp;amp; !!(x^(1&amp;lt;&amp;lt;31))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">)));&lt;/span> &lt;span class="c1">// ops: 6
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* howManyBits - return the minimum number of bits required to represent x in
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * two&amp;#39;s complement
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Examples: howManyBits(12) = 5 // [-16,15]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * howManyBits(298) = 10 // [-512,511]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * howManyBits(-5) = 4 // [-8,7]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * howManyBits(0) = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * howManyBits(-1) = 1 // [-1,0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * howManyBits(0x80000000) = 32
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 90
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">howManyBits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 负数取反，统一处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// x&amp;gt;&amp;gt;31 ? ~x:x = x&amp;gt;&amp;gt;31 &amp;amp; ~x | ~(x&amp;gt;&amp;gt;31) &amp;amp; x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 位宽取决于最高位，问题转化为寻找最高位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 90个操作符不足以遍历32个位，因此需要优化搜索算法，如二分。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// !!(x&amp;gt;&amp;gt;16) 判断x的高16位是否存在1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b16&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 若存在，至少需要16位，因此b16赋值为16或0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b16&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通过移位实现二分搜索：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 若高位存在则舍弃低位，高位全0则判断低位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b8&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">b16&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b8&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//float
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * floatScale2 - Return bit-level equivalent of expression 2*f for
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * floating point argument f.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Both the argument and result are passed as unsigned int&amp;#39;s, but
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * they are to be interpreted as the bit-level representation of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * single-precision floating point values.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * When argument is NaN, return argument
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: Any integer/unsigned operations incl. ||, &amp;amp;&amp;amp;. also if, while
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 30
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="nf">floatScale2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">uf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uf&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">31&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">exp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uf&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x7f800000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">frac&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uf&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="mh">0xff800000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">exp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">frac&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 非规格数乘2即可
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">exp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">uf&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 特殊值直接返回
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exp&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">exp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mh">0x7f800000&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 乘法不可能得到NaN，所以返回无穷
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">exp&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">frac&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * floatFloat2Int - Return bit-level equivalent of expression (int) f
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * for floating point argument f.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Argument is passed as unsigned int, but
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * it is to be interpreted as the bit-level representation of a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * single-precision floating point value.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Anything out of range (including NaN and infinity) should return
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 0x80000000u.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: Any integer/unsigned operations incl. ||, &amp;amp;&amp;amp;. also if, while
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 30
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">floatFloat2Int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">uf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uf&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">31&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">exp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uf&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x7f800000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">frac&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uf&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="mh">0xff800000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">E&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">exp&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">127&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">exp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">255&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">E&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">31&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mh">0x80000000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 特殊值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 小数舍入为0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">M&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frac&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1 + frac
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">23&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">M&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">M&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">23&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// M已经被左移了23位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 负数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * (2.0 raised to the power x) for any 32-bit integer x.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * The unsigned value that is returned should have the identical bit
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * representation as the single-precision floating-point number 2.0^x.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * If the result is too small to be represented as a denorm, return
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 0. If too large, return +INF.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Legal ops: Any integer/unsigned operations incl. ||, &amp;amp;&amp;amp;. Also if, while
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Max ops: 30
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Rating: 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="nf">floatPower2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// V = (-1)^s * M * 2^E
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// E = e-127 E∈[-126,127]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// s=0,f=0, x带入E即可得到 2^x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 为此，反演从E求e的过程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mh">0x7f800000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// +INF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">126&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">127&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [-126,127]: 2^x为规格数, f=1.0, e=x+127
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">150&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">150&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [-150,-125]: 2^x为非规格数, f=2^(x+150), e=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// too small
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>太史公曰：前面几个考察int的题目层层深入，从掩码思想到条件判断，每个新题目都可以用到前面题目的思路。只有howManyBits需要想到如何用移位构造迭代，有一定的难度。相比而言最后的浮点数题目由于放开了诸多限制，变成了一般的编程题，只需要熟练掌握浮点数规则即可作答。&lt;/p></description></item><item><title>深度学习入门——jetbot智能小车尝鲜（二）</title><link>https://lonelyuan.github.io/HugoBlog/p/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8jetbot%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E5%B0%9D%E9%B2%9C%E4%BA%8C/</link><pubDate>Tue, 01 Oct 2019 00:26:38 +0000</pubDate><guid>https://lonelyuan.github.io/HugoBlog/p/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8jetbot%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E5%B0%9D%E9%B2%9C%E4%BA%8C/</guid><description>&lt;p>那个男孩不想玩人工智能呢？在玄学修bug之后，我终于跑通了jetbot自带的深度学习demo。&lt;/p>
&lt;p>怎样才能让ai程序发挥好的效果呢？众所周知，所谓人工智能，有多少人工就有多智能。&lt;/p>
&lt;p>AI的发展离不开三个要素：&lt;strong>算力&lt;/strong>，&lt;strong>算法&lt;/strong>和&lt;strong>算材&lt;/strong>。根据摩尔定律，算力的发展是不会停滞的（虽然定律快失效了）；进几年来的AI热正是算法的突破，即深度学习相关算法的突飞猛进；而算材就是用来训练模型的数据，未来几年AI应用的进一步落地离不开算材的进一步开发（中国在AI方面的最大优势正在于此）。数据集的丰富程度和有效程度直接影响了AI应用的效果，我将在下文详细说明。&lt;/p>
&lt;p>在jetbot项目中，我们也能体验到用“人工”换“智能”的快乐。作为视觉识别类的AI应用，我们要在预设环境里创建数据集，并为其标注。有了数据集，jetbot搭载的NVIDIA牌GPU在方寸之间就能完成海量计算，仅用一颗摄像头就能实现自动避障，目标追踪，自动巡线等等炫酷功能！不要1999，也不要999，只要99！99刀NVIDIA计算卡带回家！（妮维雅打钱）&lt;/p>
&lt;blockquote>
&lt;p>给萌新理清几个概念：&lt;/p>
&lt;p>人工智能，机器学习，深度学习的关系：&lt;/p>
&lt;ul>
&lt;li>深度学习：一种实现机器学习的技术；机器学习：一种实现人工智能的方法&lt;/li>
&lt;li>【包含关系图】&lt;/li>
&lt;/ul>
&lt;p>AI的发展路径：&lt;/p>
&lt;ul>
&lt;li>弱AI：单独领域工作效率超过人类→&lt;/li>
&lt;li>通用AI：可以广泛应用于大部分领域→&lt;/li>
&lt;li>强AI：有自主意识，即将灭绝人类（不是）→&lt;/li>
&lt;/ul>
&lt;p>现在AI发展到什么地步了：弱AI，有生之年可能见到通用AI&lt;/p>
&lt;/blockquote>
&lt;p>推荐一波汉化的很好的wiki，也有自己原创的内容：http://www.waveshare.net/wiki/JetBot_AI_Kit&lt;/p>
&lt;p>本篇详细介绍两个demo的代码和可能遇到的问题，最后附上神经网络的入门笔记。同样是初次接触，大佬请绕道。&lt;/p>
&lt;h3 id="demo1自动避障">demo1：自动避障&lt;/h3>
&lt;p>小车如何实现自动避障的呢？用通俗的不能再通俗的说法，AI程序通过学习你给他的数据集，知道了什么样的图像是死路，什么样的图像是通路。得到新图像时就能判断是死路的概率有多少，在程序里可以很简单的看出，当这个概率大于0.5的时候就触发小车转向。&lt;/p>
&lt;p>具体而言，你要在你的环境里拍至少200张照片，100张标记为通路（free），100张标记为死路（blocked）。这便是你的数据集（dataset）。构建数据集的时候尽量分散在环境的各个位置和各个方向，可以沿边界环绕一圈，走一段距离停下，转一圈，收集8-10张图片。反正你的数据越多，标记的越准确，模型效果越好。&lt;/p>
&lt;p>下一步就开始训练模型了，从代码里看出，这个demo使用AlexNet模型，用pytorch实现（废话）。第一次运行你会下载一个244M左右的大文件，在&lt;code>/home/jetbot/.torch/models&lt;/code>目录下会看到这个.pth文件。这便是AlexNet了。&lt;/p>
&lt;p>继续运行程序，完整的输出结果有三十行，每行后面的小数代表当前模型的准确度（？），程序最后会从这30个模型中选取准确度最高的作为最终模型，也是一个pth文件：&lt;code>best_model.pth&lt;/code>&lt;/p>
&lt;p>下载文件和训练模型都需要花挺长时间，看到kernel busy，也就是右上角的大黑点不要轻易打断。&lt;/p>
&lt;p>什么是模型呢？稍微解释一下机器学习的概念。&lt;/p>
&lt;p>模型就是函数，其要素为输入，输出，和变换关系。举例说明：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模型&lt;/th>
&lt;th>输入&lt;/th>
&lt;th>输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>细菌向养分移动&lt;/td>
&lt;td>外界环境的化学信号&lt;/td>
&lt;td>催动鞭毛的电信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>学生参加高考&lt;/td>
&lt;td>试卷反射的光信号&lt;/td>
&lt;td>试卷上问题的答案&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>小车自动避障&lt;/td>
&lt;td>摄像头传输图像信号&lt;/td>
&lt;td>前方被堵塞的概率&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>实际上，知识的本质也是函数，生命延续的关键就在于该生命的模型是否适应环境。这里不深入解释了，觉得惊奇请参阅Yjango的频道https://space.bilibili.com/344849038他用机器学习的角度解释生物进化，非常颠覆三观。&lt;/p>
&lt;p>总之训练出来的模型就是这样一个函数。其输入为经过处理的摄像头的图形信号，输出一个0-1的数，越接近1越意味着模型认为小车要撞墙了。但是当他大于0.5的时候就会触发转向，也就实现了自动避障。&lt;/p>
&lt;blockquote>
&lt;p>AlexNet是2012年提出的一种卷积神经网络（即CNN）算法。首次实现gpu加速。&lt;/p>
&lt;p>主流深度学习框架：TensorFlow；PyTorch；Keras&lt;/p>
&lt;/blockquote>
&lt;p>还挺好玩的😀&lt;/p>
&lt;h3 id="demo2目标追踪">demo2：目标追踪&lt;/h3>
&lt;p>基于上一个demo，我们还要下载一个模型，&lt;a class="link" href="http://cocodataset.org/#home" target="_blank" rel="noopener"
>coco数据集&lt;/a>神经网络，可以检测90种不同的物体。按教程把.engine文件下载到指定位置，顺着跑就完事了。（引入模型也要花挺长时间）&lt;/p>
&lt;p>如果有数据集里的物品，从输出里能看到蓝框标出，小车会自动转向物体，同时还保留了自动避障的程序。&lt;/p>
&lt;p>遇到bug：程序仅能读取一张图像进行识别，摄像头更新的功能无法执行。&lt;/p>
&lt;h3 id="修bug摄像头问题">修bug：摄像头问题&lt;/h3>
&lt;p>描述：摄像头只要调用了一次，后面就无法在其他地方调用。直接在jupyter上关闭输出并没有作用。而且只要在一个notebook里就能重复调用，换一个就不行。而且并没有报错信息，程序一直处在busy状态。&lt;/p>
&lt;p>找到源码，在jetbot/jetbot/camera.py，但是所有样例里面调用摄像头都是用的Camera.instance()方法，而这个instance是在traitlets库里的，于是找到trailets官方文档&lt;/p>
&lt;blockquote>
&lt;p>Traitlets是一个纯 python 库，支持：&lt;/p>
&lt;ul>
&lt;li>对 python 对象属性的强类型实施( 类型属性称为 &amp;ldquo;特征&amp;rdquo; ) ；&lt;/li>
&lt;li>动态计算的默认值；&lt;/li>
&lt;li>当尝试改变时，自动验证和强制特征属性；&lt;/li>
&lt;li>当特征值改变时注册接收通知；&lt;/li>
&lt;li>从文件或者 命令行 参数中读取值- 在traitlets上不同层，因这里可以在没有配置机器的情况下使用 traitlets。&lt;/li>
&lt;/ul>
&lt;p>Traitlets支持IPython和Jupyter的配置系统，以及IPython交互小部件的声明性 API。&lt;/p>
&lt;p>ipython是一个 python 的交互式 shell，比默认的python shell 好用得多，支持变量自动补全，自动缩进，支持 bash shell 命令，内置了许多很有用的功能和函数。其中就包括traitlets库。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://traitlets.readthedocs.io/en/stable/config.html" target="_blank" rel="noopener"
>https://traitlets.readthedocs.io/en/stable/config.html&lt;/a> 在这里找到instance的功能：返回现有的类，如果没有就新建一个。&lt;/p>
&lt;p>下面是样例中调用摄像头的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">ipywidgets.widgets&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">widgets&lt;/span> &lt;span class="c1">#图像模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">IPython.display&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">display&lt;/span> &lt;span class="c1">#ipy的显示模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">traitlets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">jetbot&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Camera&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bgr8_to_jpeg&lt;/span> &lt;span class="c1">#摄像头驱动，图像格式转换&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">camera&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Camera&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">#初始化摄像头对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">widgets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;jpeg&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">#创建图像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">camera_link&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">traitlets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dlink&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">camera&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">bgr8_to_jpeg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#连接摄像头到图像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">display&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#显示图像&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>尝试从camera.py里调用原始api。得到报错：&lt;code>Each object must be HasTraits, not &amp;lt;class 'NoneType'&amp;gt;&lt;/code>，是说必须为对象指定类型。那么HasTraits这个类型是啥？文档说:任何具有trait属性的类都必须从 &lt;code>HasTraits&lt;/code> 继承。&lt;/p>
&lt;p>再次梳理调用摄像头的流程：&lt;/p>
&lt;ul>
&lt;li>引入模型：&lt;code>model.load_state_dict(torch.load('best_model.pth'))&lt;/code>&lt;/li>
&lt;li>连接摄像头：见上文&lt;/li>
&lt;li>模型执行：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>&lt;span class="c1">#此处为模型执行函数，将输入图像预处理后，执行模型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">update&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s1">&amp;#39;new&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">camera&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="c1">#初始化该函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">camera&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">observe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#将update函数设为camera.value的observer&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>研究一下observe用法：当对象发生变化时调用函数。&lt;/p>
&lt;p>&lt;a class="link" href="https://traitlets.readthedocs.io/en/stable/using_traitlets.html#validation" target="_blank" rel="noopener"
>https://traitlets.readthedocs.io/en/stable/using_traitlets.html#validation&lt;/a>&lt;/p>
&lt;p>执行如下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">ipywidgets.widgets&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">widgets&lt;/span> &lt;span class="c1">#图像模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">IPython.display&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">display&lt;/span> &lt;span class="c1">#ipy的显示模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">traitlets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">jetbot&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Camera&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bgr8_to_jpeg&lt;/span> &lt;span class="c1">#摄像头驱动，图像格式转换&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">camera&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Camera&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">#初始化摄像头对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">change&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">change&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;new&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">display&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#显示图像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">update&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s1">&amp;#39;new&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">camera&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">camera&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">observe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出一大堆数组，说明camera.value是这一大堆像素。而且observe正常运行，数据一直冒出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[[122, 116, 130],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [126, 113, 127],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [125, 117, 129],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [ 84, 96, 107],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [ 82, 96, 113],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [ 93, 93, 113]],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [[120, 119, 130],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [122, 120, 119],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [118, 123, 130],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而就是不实时更新数据，卒。&lt;/p>
&lt;p>👴佛了。&lt;/p>
&lt;h3 id="神经网络笔记">神经网络笔记&lt;/h3>
&lt;h3 id="alexnetcnn">AlexNet——CNN&lt;/h3>
&lt;p>2012年由Hinton学生Alex提出，是Lenet加宽版。其采用了一系列的新技术：成功的引用了relu、dropout和lrn等trick，首次采用gpu加速。其包含65万神经元，5个卷积层，三个后面带有池化层，最后用了三个全链接。&lt;/p></description></item><item><title>单片机入门——jetbot智能小车尝鲜(一)</title><link>https://lonelyuan.github.io/HugoBlog/p/%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8jetbot%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E5%B0%9D%E9%B2%9C%E4%B8%80/</link><pubDate>Fri, 20 Sep 2019 00:25:55 +0000</pubDate><guid>https://lonelyuan.github.io/HugoBlog/p/%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8jetbot%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E5%B0%9D%E9%B2%9C%E4%B8%80/</guid><description>&lt;p>那个男孩不想玩树莓派呢？机缘巧合之下，我得到了一台价值上百美元的智能小车的使用权。&lt;/p>
&lt;p>小车的核心是NVIDIA家的jetson-nano开发板，这款19年三月才发布的微型AI计算机可谓是平民级核弹，四核A57的CPU，128核心Maxwell架构的GPU，4g内存，支持4k视频解码，而且这只五脏俱全的麻雀只需要5W的电源支持，任何一支充电宝都可以胜任。而它的定位是用它简单的搭建人工智能应用，非常的amazing。&lt;/p>
&lt;p>本文的目的,不完全是新手教程,还有自己学习过程的记录和分享.初次接触,多有疏漏,欢迎指教.&lt;/p>
&lt;p>【图片：主板证件照】&lt;/p>
&lt;blockquote>
&lt;p>给萌新理清几个概念：&lt;/p>
&lt;p>单片机：Single-Chip Microcomputer。&lt;/p>
&lt;p>树莓派：一款著名的微型电脑品牌（本文介绍的jetson-nano可以理解为是树莓派的竞品，相比树莓派，这款单片机价格更高，性能更好，主打AI应用）&lt;/p>
&lt;p>jetbot：以jetson-nano为平台搭建的ai机器人应用，也就是所谓智能小车&lt;/p>
&lt;/blockquote>
&lt;h3 id="硬件组装积木和电工">硬件组装:积木和电工&lt;/h3>
&lt;p>本人拿到的是零件状态的小车，所以首先讲一讲组装的问题。有关具体步骤，官网教程十分详细，贴个连接给懒人吧：https://www.ncnynl.com/archives/201904/2927.html&lt;/p>
&lt;p>这里只讲一讲我作为初学者的一些理解。首先，玩单片机和玩积木的区别就在于编程。当然，入门单片机还需要其他技能。比如，电工技能：你需要进行线材的简单加工，引脚的焊接，准备基本的工具就好，毕竟那个男孩没有一根热热的棒子呢（指&lt;strong>电烙铁&lt;/strong>）。然后，各个部件的拼接固定需要一些做手工的技巧，这个也不用怕，赫鲁晓夫曾经说过：&lt;strong>热熔胶&lt;/strong>可以让我们创造奇迹。&lt;/p>
&lt;p>在这个层面上，初学者会浪费许多耗材，这是必要的练习手段，所以初学者也可以从最简单的芯片入手。同时你还要学习诊断硬件方面的问题，&lt;strong>万用表&lt;/strong>会很有帮助。关于更详细的工具和耗材的需要，请自行查阅单片机入门有关资料。&lt;/p>
&lt;p>在本项目中，焊接工作已经完成，剩下的连接都是可插拔式的。我们只需要两把螺丝刀即可完成组装。即便如此，本人还是花了一晚上才把小车点亮，原因是我得到的线材损坏近半，只得自己寻找和修理。&lt;/p>
&lt;p>下面分析一下小车的结构:&lt;/p>
&lt;ul>
&lt;li>jetson-nano开发板:即本机的主板,可以看到有两层芯片,上层为核心层,包括cpu,gpu和内存可以像笔记本内存条一样拆卸;下层为主板,用于连接各种设备&lt;/li>
&lt;li>intel无线网卡:将上层拆下即可安装.令连出两根天线,缠绕机身即可.&lt;/li>
&lt;li>PiOLED显示器和拓展版:连接在I2C主线上&lt;/li>
&lt;li>相机模块:官方样例展示了只用一个摄像头通过深度学习进行自动避障的demo.&lt;/li>
&lt;li>马达和其驱动板:下文重点讲解&lt;/li>
&lt;/ul>
&lt;p>开发板就可以运行一个完整的Ubuntu系统,其余设备是为其拓展功能的.&lt;/p>
&lt;h3 id="硬件架构驱动芯片和i2c主线">硬件架构：驱动芯片和I2C主线&lt;/h3>
&lt;p>我在玩小车的过程中耽误最长时间的就是电机（即马达）驱动了，借此讲一讲系统架构的事。&lt;/p>
&lt;p>让轮子前进要靠马达，给马达供电不能直接让主板来做，要让主板给另一块小芯片发送指令，这块小芯片连接着独立的电源，收到指令才会给马达通电。这块小芯片即是电机驱动板。&lt;/p>
&lt;p>驱动芯片是从硬件走向软件的第一道桥梁，可以类比PC的IO设备来理解。和物理世界交互的各种功能，都需要有专门的驱动芯片。包括马达，摄像头，扬声器，机械臂等等，只不过有的可以集成在一起，如：小车上的摄像头，PiOLED显示器等；有的出于体积，安全性，模块化的考虑需要分开，如电机和驱动板。&lt;/p>
&lt;h4 id="电机驱动板">电机驱动板&lt;/h4>
&lt;p>官方给出的电机驱动板型号为:DC-Stepper-Motor PCA9685+TB6612.可以驱动两个步进电机或四个直流电机。（四轴飞行器gkd）本项目只用到了两个直流电机。&lt;/p>
&lt;p>各个引脚的讲解：https://learn.adafruit.com/adafruit-stepper-dc-motor-featherwing/pinouts&lt;/p>
&lt;p>电机驱动板上共连接有10根跳线。一对电源输入，两对为马达输出。还需四根母-母杜邦线来连接至主板的&lt;strong>I2C总线&lt;/strong>,具体来说,是在LED屏旁边的拓展板。分别是：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">驱动板引脚&lt;/th>
&lt;th style="text-align:center">主板I2C引脚&lt;/th>
&lt;th style="text-align:center">功能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">3V3&lt;/td>
&lt;td style="text-align:center">3V3&lt;/td>
&lt;td style="text-align:center">为驱动板供电,即电源正极&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">GND&lt;/td>
&lt;td style="text-align:center">GND&lt;/td>
&lt;td style="text-align:center">接地,即电源负极&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">SDA&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">串行数据线，传输数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">SCL&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">串行时钟线，传输控制信号&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>【图片：驱动板引脚】&lt;/p>
&lt;p>接错了有可能烧坏板子哦&lt;/p>
&lt;h4 id="i2c总线">I2C总线&lt;/h4>
&lt;p>所谓总线,可以理解为一条街道,每个设备就是街道两旁的房子,房内的住户出门走亲访友就是数据在不同设备间的传输。&lt;/p>
&lt;p>I2C总线是常用于嵌入式系统的一种简易串行总线.他有简洁的双线结构(SCL+SDA),每个设备都有一个地址码,以此实现多个设备相互通讯。设备有主从之分，主设备/主端必须是带有CPU的逻辑模块，在同一总线上同一时刻使能有一个主端，可以有多个从端，从端的数量受地址空间和总线的最大电容 400pF的限制。&lt;/p>
&lt;p>可以使用i2c-tools调试i2c总线:&lt;/p>
&lt;ul>
&lt;li>检测有几组i2c总线在系统上&lt;code>i2cdetect -l&lt;/code>&lt;/li>
&lt;li>检测挂载在i2c-1上的设备&lt;code>i2cdetect -r -y 1&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> 0 1 2 3 4 5 6 7 8 9 a b c d e f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 00: -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 30: -- -- -- -- -- -- -- -- -- -- -- -- 3c -- -- --（led）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 60: 60 -- -- -- -- -- -- -- -- -- -- -- -- -- -- --（电机驱动）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 70: 70 -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>查看设备(地址为0x20)上所有寄存器的值i2cdump -f -y 1 0x20&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对单个寄存器进行读写:&lt;/p>
&lt;p>&lt;code>i2cset -f -y 1 0x20 0x77 0x3f &lt;/code>（设置i2c-1上0x20器件的0x77寄存器值为0x3f）&lt;/p>
&lt;p>&lt;code>i2cget -f -y 1 0x20 0x77 &lt;/code> （读取i2c-1上0x20器件的0x77寄存器值）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>jetson-nano开发板提供了6条I2C主线,以及其他丰富的接口。理解这些接口是拓展各种设备的前提。&lt;/p>
&lt;h3 id="软件连接ssh远程桌面">软件连接:ssh远程桌面&lt;/h3>
&lt;p>从头开始的话，我们还需要往sd卡里烧写系统镜像，不过我拿到的已经完成了这一步骤，故不再赘述。&lt;/p>
&lt;p>在官方教程中,需要hdmi线连接显示屏,usb连接鼠标键盘,来进入jetson-nano的Ubuntu系统.其目的在于首次连接一个无线网络(手机热点),之后只要电脑和nano在同一网络,即可用电脑访问nano的IP(8888端口),直接操纵jetbot.&lt;/p>
&lt;p>由于我并没有hdmi线,只有一根网线,反正都能插,插谁不一样?所以用网线把小车和笔记本连接起来组成局域网.用ssh的方式进入nano的系统.具体步骤如下:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ip发现:在插入网线前后执行两次:&lt;code>arp -a&lt;/code>,比较不同,会发现多出一个地址,类型为动态,此即为小车的内网IP.小车的led屏也会自动显示其ip.如&lt;code>eth0:192.168.x.x&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>(如此,我们可以直接从浏览器访问这个ip的8888端口,并能运行jupyter notebook了.但我们不能让小车拖着网线跑啊,所以还是要配置无线网络.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将笔记本的wifi连接设为对以太网可共享,这一步是为了让小车能通过笔记本联网&lt;/p>
&lt;/li>
&lt;li>
&lt;p>端口扫描:&lt;code>nmap -sT 192.168.x.x&lt;/code>发现22端口开放,故连接之:&lt;code>ssh jetbot@192.168.x.x&lt;/code>,就用官方教程给的账户密码.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>连接成功后,就可以用命令行工具连接WiFi了,但还是安装一下远程桌面吧.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置远程桌面:执行以下命令:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get install tightvncserver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install xrdp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install vnc4server tightvncserver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>之后在你的主机win+R，输入mstsc,进入远程登录桌面，输入小车的ip地址，点击连接&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在xrdp的登陆界面输入用户名密码即可打开远程桌面&lt;/p>
&lt;p>(这里我用jetbot用户登陆遭遇闪退,用root就可以,不清楚原因)(另外开了远程桌面内存疯涨,就很离谱)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>连接上wifi后,你能在小车的led板上看到另一个ip:&lt;code>wlan0:192.168.x.x&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>不管怎样,连接上wifi之后的操作就很简单了.跟着教程,跑一跑demo,还是很有成就感的.&lt;/p>
&lt;h3 id="排查bug">排查bug&lt;/h3>
&lt;p>然而demo并没有让我跑出来,且指向同一个错误:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">OSError: [Errno 121] Remote I/O error
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>沿着jupyter notebook的报错一直走,一直到了最底层,向设备写入数据报错,&lt;code>remote IO error&lt;/code>.&lt;/p>
&lt;p>看起来像是硬件的问题。一步一步排查呗&lt;/p>
&lt;ul>
&lt;li>
&lt;p>怀疑跳线错误&lt;/p>
&lt;ul>
&lt;li>更换跳线——无果&lt;/li>
&lt;li>用万用表测量线两端的信号——正常，排除连接问题
&lt;ul>
&lt;li>时钟线保持3.3v每隔几秒跳到2.2v又回来，结合i2c的原理应该是正常现象？&lt;/li>
&lt;li>数据线同样保持3.3v，间断跳至2.3，2.0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>软件方法检验设备连接性&lt;/p>
&lt;ul>
&lt;li>用i2ctools可以检测到设备，拔下4根接线，在0x60,0x70处的设备消失（一个是i2c线，一个是逻辑供电？）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> 0 1 2 3 4 5 6 7 8 9 a b c d e f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">00: -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30: -- -- -- -- -- -- -- -- -- -- -- -- 3c -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">70: -- -- -- -- -- -- -- --
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>然而，在通电状态下，把连线拔下又插上之后，i2c又能检测到设备，然后示例代码就能运行了？？？&lt;/p>
&lt;p>迷惑。所以开机时机器并没能正确载入设备，反倒是重新连接后能识别了？？？本来我都要换驱动板了，orz。&lt;/p>
&lt;p>又或者是和驱动板上的reset按钮有关？等下次遇到问题再说吧。&lt;/p>
&lt;h3 id="拾遗">拾遗&lt;/h3>
&lt;h4 id="linux内存占用">linux内存占用&lt;/h4>
&lt;p>led屏会显示内存占用，然鹅时间长了总会到90%以上，可我并没有运行什么程序。&lt;/p>
&lt;p>经查阅此处显示的是实际占有的加上buffer和cached mem部分，可以理解为缓存的，随时清理，并不占用实际内存。&lt;/p>
&lt;p>可用top命令查看内存详情。&lt;/p>
&lt;h4 id="供电问题">供电问题&lt;/h4>
&lt;p>用充电宝供电方便，但是只要一断电系统就会重启，这对linux系统而言伤害很大。&lt;/p>
&lt;p>而在充电宝电量不满时，经常发生开不了机的问题，大概是因为电量不足导致电压不稳。&lt;/p>
&lt;h5 id="关机命令">关机命令：&lt;/h5>
&lt;p>&lt;code>sudo shutdown -h now&lt;/code>&lt;/p>
&lt;h5 id="重启">重启：&lt;/h5>
&lt;p>&lt;code>shutdown -h now -r&lt;/code>&lt;/p>
&lt;p>&lt;em>下一篇：操纵小车和AI初探&lt;/em>&lt;/p>
&lt;h3 id="参考链接">参考链接&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/NVIDIA-AI-IOT/jetbot/wiki/Hardware-Setup" target="_blank" rel="noopener"
>https://github.com/NVIDIA-AI-IOT/jetbot/wiki/Hardware-Setup&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://robocarstore.cn/" target="_blank" rel="noopener"
>https://robocarstore.cn/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.gpus.cn/gpus_list_page_techno_support_content?id=50" target="_blank" rel="noopener"
>http://www.gpus.cn/gpus_list_page_techno_support_content?id=50&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/789944463fd7" target="_blank" rel="noopener"
>https://www.jianshu.com/p/789944463fd7&lt;/a>&lt;/p></description></item></channel></rss>