<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lonelyuan.github.io</id>
    <title>lonelyuan&apos;s Blog</title>
    <updated>2021-06-11T02:51:13.925Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lonelyuan.github.io"/>
    <link rel="self" href="https://lonelyuan.github.io/atom.xml"/>
    <subtitle>&gt;&gt; 不要恐慌 | Don&apos;t Panic </subtitle>
    <logo>https://lonelyuan.github.io/images/avatar.png</logo>
    <icon>https://lonelyuan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, lonelyuan&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[基于vivado的基于FPGA的一种基于MIPS的一种五级流水线CPU实现的注释]]></title>
        <id>https://lonelyuan.github.io/post/mips_pipeline_cpu/</id>
        <link href="https://lonelyuan.github.io/post/mips_pipeline_cpu/">
        </link>
        <updated>2021-06-09T09:14:19.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文所述为计算机组成原理课拓展实验的相关记录，基于“龙芯体系结构与CPU设计教学实验系统”<br>
项目官网： http://www.loongson.cn/business/general/teach/356.html；<br>
相关资料代码：#TODO:: github仓库<br>
PS：标题可简记为《基于基于的一种基于的一种实现》</p>
</blockquote>
<h1 id="吐槽时间">吐槽时间</h1>
<p>快考试了，👴发觉👴计组学了个🔨，👴去年也学了个🔨，但是去年可以归因于晦气的晦气，今年只能说自己晦气。难道还要重蹈去年的晦气吗？👴本应该回去背课本，刷考研题，但是👴一看ppt就想起我们敬爱的《计算机组成原理》课的任课老师，丐哥老师反复强调的至理名言：“听不懂的举手（无停顿）都没举手，都听懂了，非常好。”本人十分钦佩丐哥老师对幽默感的独特理解。<br></p>
<p><em>（但是特此声明：本人不了解、不认同其关于&quot;5G是个几把&quot;，&quot;高晓松很nb这个人&quot;，&quot;钱=浪漫&quot;等议题的看法）</em><br></p>
<p>而且👴这人很怪，课本上的重点，不好玩；选做的实验，好玩！哎就是玩，怪不得卷不过别人，你也配卷？滚去考研吧。<br></p>
<p>众所周知，计算机学生的本科生涯，如果能做到在自己设计的CPU上运行自己写的操作系统并用自己写的编译器跑代码，那就非常成功了。👴差不多，👴能在自己搜的代码上写自己的注释并用自己的电脑截图，都是三个&quot;自己&quot;。那么今天给大家爆个啥捏，流水线奥。<br></p>
<h1 id="用计算机造计算机">“用”计算机→“造”计算机</h1>
<p>上回书说到（#TODO:: CSAPP大篇），汇编器(as)让我们得到了机器能看懂的比特流，最后一步只需要连接器(ld)将其和其他调用一起载入内存。这回答了程序如何在CPU这个平台上运行的问题，然而一个更基本的问题是，这个现有的平台是如何实现的？一个粗略的认识是，我们知道这些足以实现CPU的复杂的逻辑，其最小单元总对应到简单的诸如逻辑门上面，但是落实到真正的物理实现之上，如何使效率最高？功耗最小？这些问题所跨越的复杂度的量级依然是一片巨大的迷雾。照亮这片迷雾的知识，大概隶属于IC学科。<br></p>
<p>However，作为CS专业而不是IC专业，我们的目标仅在于理解所谓“组成原理”。在IC产业的复杂度规模数轴上，向下是专有芯片（又称嵌入式？），功能专用，规模较小；向上是通用芯片，即手机电脑等的核心，其难度不言而喻。位于中间的FPGA则既兼顾了自由度也考虑了速度，因此，这玩意能满足CS本科教学的需要（主要是便宜耐操）。<br></p>
<h1 id="高贵的ic工程师都用啥轮子">高贵的IC工程师都用啥轮子</h1>
<p>Vivado是一个FPGA集成设计平台（也算一个EDA？），他主界面左侧的工作流窗口很好的概括了利用FPGA开发的基本流程。即</p>
<ul>
<li>编写设计源码(Source)：使用Verilog语言编写逻辑或引入IP
<ul>
<li>设计仿真模拟(Simulation)：通过观察仿真波形图和编写testbench来对设计进行debug
<ul>
<li>综合(Systhesis)门级网表：从RTL级描述降维到门级网表
<ul>
<li>生成(Implementation)布局布线：根据管脚约束，将依然是虚拟的门级连线落实为实际的线路
<ul>
<li>进行硬件编程(program)：生成比特流并写入目标设备</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://lonelyuan.github.io/post-images/1623373911775.png" alt="" loading="lazy"></figure>
<blockquote>
<p>名词解释：<br>
IC：集成电路<br>
FPGA：现场可编程门阵列<br>
Verilog：一种硬件描述语言，语法涵盖了自顶向下五个抽象层面：系统级、算法级、RTL级、门级、开关级。<br>
RTL：寄存器传输级。一般使用最多的就是RTL级。<br>
IP：Intellectual Property内核模块，可以理解为将代码封装为函数。分为，软IP内核(soft IP core)，固IP内核(firm IP core)和硬IP内核(hard IP core)3个层次，相当于集成电路的毛坯、半成品和成品。<br>
SoC：片上系统，大概是芯片及其装载的第一层软件接口的集合，很宽泛的概念。<br>
EDA：电子设计自动化。</p>
</blockquote>
<p>由此，我们可以大致探清了这片迷雾，CPU的设计如何从高抽象层次的逻辑，梳理成最底层的逻辑门，再实现为小小的芯片。那么我们有了轮子，要造一个CPU，还要确定目标指令集。由于本项目由龙芯公司赞助，那必然要选MIPS了。</p>
<h1 id="mips指令集格式">MIPS指令集格式</h1>
<p>啥叫指令集呢，学过几种语言就不难理解。高级程序语言规定每个ascii码的组合所对应的含义，指令集规定0和1的组合所对应的寄存器，ALU的各种信号。MIPS指令集从属于RISC系列，最基本的指令有31条。<br></p>
<p>//讲到这里本应该打个表展示31条指令，但是👴懒得打了。<br></p>
<p>Vivado中，.coe文件用于初始化IP核，本实验给出的.coe文件中存放了几条指令，不过是16进制数字，写个小脚本打印成可读的形式。</p>
<pre><code class="language-python"># mips_dump.py
with open(path,'r') as f:
    hex_list = f.read().split('\n')
    bin_list = list(map(lambda x:bin(int(x,16)),hex_list))
    # bin_code_list = [&quot;{:0&gt;32}&quot;.format(i[2:],'b') for i in bin_list]
    bin_code_list = [i[2:].zfill(32) for i in bin_list]

IType_op_dict = {
    '001000':'addi',
    '001001':'addiu',
    '001100':'ori',
    '001101':'xori',
    '001111':'lui',
    '100011':'lw',
    '101011':'sw',
    '000100':'beq',
    '000101':'bne',
    '001010':'slti',
    '001011':'sltiu'
}

RType_func_dict = {
    '100000':'add',
    '100001':'addu',
    '100010':'sub',
    '100011':'subu',
    '100100':'and',
    '100101':'or',
    '100110':'xor',
    '100111':'nor',
    '101010':'slt',
    '101011':'sltu',
    '000000':'sll',
    '000010':'srl',
    '000011':'sra',
    '000100':'sllv',
    '000110':'srlv',
    '000111':'srav',
    '001000':'jr',
}

def f_hex(ori, width): # bin-&gt;hex
    return &quot;0x&quot;+hex(int(ori,2))[2:].zfill(width)
def f_reg(ori): # print register num
    return &quot;$&quot;+str(int(ori,2)).zfill(2)
def code_dump(type:str,inst:str,params:list):
    if type == 'R':
        s = inst.ljust(6) + &quot;, &quot;.join([f_reg(params[0]),f_reg(params[1]),f_reg(params[2]),f_hex(params[3],2)])
    elif type == 'I':
        s = inst.ljust(6) + &quot;, &quot;.join([f_reg(params[0]),f_reg(params[1]),f_hex(params[2],8)])
    else:
        s = inst.ljust(6) +'0x'+ hex(int(params[0],2))[2:].zfill(8)
    return s

assembly_list = []
for _ in bin_code_list:
    op = _[:6] # public field
    try:
        if op == '000000': # R-Type
            rs = _[6:11]
            rt = _[11:16]
            rd = _[16:21]
            shamt = _[21:26]
            func = _[26:]
            assembly_list.append(code_dump('R',RType_func_dict[func],[rs,rt,rd,shamt]))
        elif op in ['000010', '000011']:  # J-Type
            target = _[6:]
            assembly_list.append(code_dump('J','j',[target]))
        else: # I-Type
            rs = _[6:12]
            rt = _[12:18]
            imm = _[18:]
            assembly_list.append(code_dump('I',IType_op_dict[op],[rs, rt, imm]))
    except Exception as e:
        assembly_list.append(&quot;***** decode error! *****&quot;)

head = &quot;+---hexdump----|--------- assembly ---------+&quot;
print(head)
addr = 0
for i in range(len(bin_code_list)):
    print(&quot;|&quot;+ f_hex(bin(addr),2) +&quot; &quot;+ hex_list[i] +&quot; | &quot;+ assembly_list[i].ljust(26) + &quot; |&quot;)
    addr += 4
tail = &quot;+&quot;+&quot;-&quot;*43+&quot;+&quot;
print(tail)
</code></pre>
<p>打印出来👴傻了，怎么还有不在31条范围里的。</p>
<pre><code>+---hexdump----|--------- assembly ---------+
|0x00 24010001 | addiu $00, $04, 0x00000001 |
|0x04 00011100 | sll   $00, $01, $02, 0x04  |
|0x08 00411821 | addu  $02, $01, $03, 0x00  |
|0x0c 00022082 | srl   $00, $02, $04, 0x02  |
|0x10 28990005 | slti  $09, $36, 0x00000005 |
|0x14 07210010 | ***** decode error! *****  |
|0x18 00642823 | subu  $03, $04, $05, 0x00  |
|0x1c AC050014 | sw    $00, $20, 0x00000014 |
|0x20 00A23027 | nor   $05, $02, $06, 0x00  |
|0x24 00C33825 | or    $06, $03, $07, 0x00  |
|0x28 00E64026 | xor   $07, $06, $08, 0x00  |
|0x2c AC08001C | sw    $00, $32, 0x0000001c |
|0x30 11030002 | beq   $16, $12, 0x00000002 |
|0x34 00C7482A | slt   $06, $07, $09, 0x00  |
|0x38 24010008 | addiu $00, $04, 0x00000008 |
|0x3c 8C2A0014 | lw    $02, $40, 0x00000014 |
|0x40 15450004 | bne   $20, $20, 0x00000004 |
|0x44 00415824 | and   $02, $01, $11, 0x00  |
|0x48 AC2B001C | sw    $02, $44, 0x0000001c |
|0x4c AC240010 | sw    $02, $16, 0x00000010 |
|0x50 0C000019 | j     0x00000019           |
|0x54 3C0C000C | lui   $00, $48, 0x0000000c |
|0x58 004CD007 | srav  $02, $12, $26, 0x00  |
|0x5c 003AD804 | sllv  $01, $26, $27, 0x00  |
|0x60 0360F809 | ***** decode error! *****  |
|0x64 A07A0005 | ***** decode error! *****  |
|0x68 0063682B | sltu  $03, $03, $13, 0x00  |
|0x6c 1DA00003 | ***** decode error! *****  |
|0x70 00867004 | sllv  $04, $06, $14, 0x00  |
|0x74 000E7883 | sra   $00, $14, $15, 0x02  |
|0x78 002F8006 | srlv  $01, $15, $16, 0x00  |
|0x7c 1A000008 | ***** decode error! *****  |
|0x80 002F8007 | srav  $01, $15, $16, 0x00  |
|0x84 240B008C | addiu $00, $44, 0x0000008c |
|0x88 06000006 | ***** decode error! *****  |
|0x8c 8D5C0003 | lw    $21, $48, 0x00000003 |
|0x90 179D0007 | bne   $57, $52, 0x00000007 |
|0x94 A0AF0008 | ***** decode error! *****  |
|0x98 80B20008 | ***** decode error! *****  |
|0x9c 90B30008 | ***** decode error! *****  |
|0xa0 2DF8FFFF | sltiu $31, $35, 0x00003fff |
|0xa4 0185E825 | or    $12, $05, $29, 0x00  |
|0xa8 01600008 | jr    $11, $00, $00, 0x00  |
|0xac 31F4FFFF | ori   $31, $19, 0x00003fff |
|0xb0 35F5FFFF | xori  $31, $23, 0x00003fff |
|0xb4 39F6FFFF | ***** decode error! *****  |
|0xb8 08000000 | j     0x00000000           |
+-------------------------------------------+
</code></pre>
<p>总之，代码都给你了，下面给出一个vivado实验的完整流程，不全面，但是都是踩坑经验。</p>
<h2 id="vivado使用">Vivado使用</h2>
<p>本流程环境：Vivado 2020.2<br><br>
开发板型号：LS-CPU-EXB-1<br></p>
<h3 id="创建项目">创建项目</h3>
<p>下一步，下一步，下一步，，，确认。<br>
这一步只需要注意选器件，一定要选对。否则有可能在Implementation遇到“端口电平不匹配”“端口数量不足”等硬件问题。当然，有可能型号相近的性能规格也差不多，这属于玄学问题了。实验书上选择的的型号应该是“xc7a200tfbg676-2”，但是👴用的是“xc7a200tfbv676-2”也能成功写入比特流。</p>
<h3 id="编写代码并仿真">编写代码并仿真</h3>
<p>本实验的代码大多来自“2016-04-14”，那就是龙芯公司给的源代码。在该系列代码中有一处bug，位于“单周期CPU实验”的single_cycle_cpu.v中。214行，<code>resetn</code>应该为<code>{4{resetn}}</code>，写使能位宽应为为4。<br>
<img src="https://lonelyuan.github.io/post-images/1623379687932.png" alt="" loading="lazy"></p>
<p>下面讲解一下项目结构，所有实验都是类似的：<br>
<img src="https://lonelyuan.github.io/post-images/1623374928604.png" alt="" loading="lazy"><br>
三个顶层文件夹分别对应Add Source里的三类源文件：添加设计，添加仿真，添加约束。如果不需要上板，只完成仿真，那么只需要添加设计（几个.v），添加仿真（testbench.v/tb.v）就足够了，xxx_display.v也是上板需要的故而可以忽略。（实际上，图中我用箭头标记的都用不到）。</p>
<p>编写tb，无非是给tb里声明为input的信号赋值，还可以使用<code>#xx</code>，让tb等待一段时间。</p>
<p>点击Run Simulation，等一会就能看到波形图。波形图有三种颜色：</p>
<ul>
<li>绿色代表信号正常正常；</li>
<li>红色的X代表信号不确定；</li>
<li>蓝色的Z代表信号休眠。</li>
</ul>
<p>一般遇到红X，都是未初始化问题。蓝Z大概是没有模块调用这些信号。Vivado波形图的操作极其难用，这里介绍一个相对好用的操作：左键从左向右水平划，会直接缩放到鼠标滑过的这一段。右键选择进制等操作略。</p>
<figure data-type="image" tabindex="2"><img src="https://lonelyuan.github.io/post-images/1623378896380.png" alt="" loading="lazy"></figure>
<p>仿真需要注意的问题：</p>
<ul>
<li>如果文件没问题，模块调用层次会被自动解析从而呈现成一棵树，而不是好几个顶层文件。</li>
<li>注意set as top，应该设为根部模块（调用其他模块的）和tb
<ul>
<li>//如果设错了可能在Implementation会出现“端口未赋初值”的报错。</li>
</ul>
</li>
<li>中文乱码是经典字符集问题，有可能在换行处导致语法错误。建议统一换成utf-8。
<ul>
<li>简单解决方法：从vscode里复制。</li>
</ul>
</li>
</ul>
<h3 id="引入ip核">引入IP核</h3>
<p>对于流水线CPU，data_ram和inst_rom需要同步写，自己实现比较复杂，故直接实例化封装好的内存块IP。如何引入？首先说明几种文件格式：</p>
<ul>
<li>.dcp 原意为checkpoints文件，是一种加密压缩文件。用于封装模块方便调用，但对版本要求极其敏感。</li>
<li>.xci/.xcix IP核配置文件，本质是一个xml。是Vivado在新版本提倡使用xci而不是dcp。</li>
<li>.xdc 管脚约束文件。在Implementation用到，此处按下不表。</li>
</ul>
<p>这几种文件格式都是可以直接Add Source添加进来的。实验老师同时提供dcp和xci文件，添加dcp崩屎了，原因估计如上。添加xci之后，提示我将IP更新为core cointainer的形式</p>
<figure data-type="image" tabindex="3"><img src="https://lonelyuan.github.io/post-images/1623377228417.png" alt="" loading="lazy"></figure>
<p>更新就完了。然后需要等一会，IP还要执行一步synth，这段时间里IP属于锁住的状态，不能修改配置。</p>
<figure data-type="image" tabindex="4"><img src="https://lonelyuan.github.io/post-images/1623377562565.png" alt="" loading="lazy"></figure>
<p>注意更换器件后，IP核都会锁住。这表示IP的配置和当前环境不匹配。对所有IP锁住的问题，只需要点击菜单栏Reports→Reports IP  Status，然后点upgrade即可解除锁定。</p>
<h3 id="我直接上板">我直接上板</h3>
<p>直接点生成比特流，会一步步的按工作流向下运行，等待几分钟就能愉快的收获你的报错了！</p>
<figure data-type="image" tabindex="5"><img src="https://lonelyuan.github.io/post-images/1623379096063.jpg" alt="" loading="lazy"></figure>
<p>在把上文提到的坑都踩过一遍之后，终于没有critical warning，泪目。</p>
<p>但是此时实验课已经结束了，👴偷溜到没人的实验室，并留下以下珍贵画面</p>
<figure data-type="image" tabindex="6"><img src="https://lonelyuan.github.io/post-images/1623379266894.jpg" alt="" loading="lazy"></figure>
<p>然后👴发现data_ram写入失败。但是👴没时间搞了，👴还是滚去复习课本吧。</p>
<h2 id="多周期流水线cpu原理">多周期流水线CPU原理</h2>
<p>最后，继续复习计组。<br></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我和拖延症的战争]]></title>
        <id>https://lonelyuan.github.io/post/ProcrastinationWar/</id>
        <link href="https://lonelyuan.github.io/post/ProcrastinationWar/">
        </link>
        <updated>2021-04-15T15:01:29.000Z</updated>
        <content type="html"><![CDATA[<p>//这是一篇永远不会完结的文章。<br>
//先准备目录</p>
<p>0x01 | 拖延症的生理基础</p>
<ul>
<li>习惯的重要性</li>
<li>习惯行为学</li>
<li>生理基础：多巴胺</li>
<li>演化论证据</li>
</ul>
<p>0x02 | 对拖延症的方法论综述</p>
<ul>
<li>可行的计划</li>
<li>积极的环境</li>
<li>正向的反馈</li>
<li>能战胜拖延症的，是爱</li>
</ul>
<p>0x03 | 高级作战录像</p>
<ul>
<li>拖延循环</li>
<li>拖延症不是你失败的唯一原因</li>
<li>此身不灭，壮志不渝</li>
</ul>
<p>0x04 | 西西弗斯计划</p>
<ul>
<li>模型比方法更重要</li>
<li>对话机制</li>
<li>提示机制</li>
<li>这场战争，我们还没输，但也只能说还没输</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[About Me]]></title>
        <id>https://lonelyuan.github.io/post/about/</id>
        <link href="https://lonelyuan.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>Do not go gentle into that good night,<br>
Old age should burn and rave at close of day;<br>
Rage, rage against the dying of the light.</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>Do not go gentle into that good night,<br>
Old age should burn and rave at close of day;<br>
Rage, rage against the dying of the light.</p>
</blockquote>
<!-- more -->
<h1 id="我是谁">🐭我是谁</h1>
<ul>
<li>存在主义者。</li>
<li>性别男，爱好女。</li>
<li>本阶段人生目标：想理解计算机的一切。</li>
<li>目前还是Web狗一条。</li>
</ul>
<!-- more -->
<h1 id="本博客宗旨">🍌本博客宗旨</h1>
<ul>
<li>尽量不制造垃圾。</li>
<li>争取周更。</li>
</ul>
<h1 id="同好检测器">🤺同好检测器</h1>
<h3 id="masterpiece">Masterpiece</h3>
<p>//排名按时间顺序</p>
<p><strong>文</strong>：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6494335"><label class="task-list-item-label" for="task-item-6494335"> 大刘</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7896736"><label class="task-list-item-label" for="task-item-7896736"> 王小波</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2417277"><label class="task-list-item-label" for="task-item-2417277"> 《GEB》</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4990291"><label class="task-list-item-label" for="task-item-4990291"> 《量子窃贼》三部曲</label></li>
</ul>
<p><strong>剧</strong>：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2676140"><label class="task-list-item-label" for="task-item-2676140"> Re:0</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8895640"><label class="task-list-item-label" for="task-item-8895640"> JOJO</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3321761"><label class="task-list-item-label" for="task-item-3321761"> 爱死机</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9841868"><label class="task-list-item-label" for="task-item-9841868"> Rick&Morty</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2633694"><label class="task-list-item-label" for="task-item-2633694"> 黑镜</label></li>
</ul>
<p><strong>第九艺术</strong>：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2327982"><label class="task-list-item-label" for="task-item-2327982"> Minecraft</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-35628"><label class="task-list-item-label" for="task-item-35628"> Bioshock: Infinity</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6280842"><label class="task-list-item-label" for="task-item-6280842"> Celeste</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9854219"><label class="task-list-item-label" for="task-item-9854219"> 戴森球计划</label></li>
</ul>
<!--

### Habit
- [ ] 游泳（夏天）
- [ ] 游戏（冬天）
- [ ] 多巴胺实验（指毫无目的的刷屏bilibili和知乎，像极了多巴胺实验里的小鼠）
- [ ] 拖延症晚期（详见 [我和拖延症的战争](https://lonelyuan.github.io/post/ProcrastinationWar)）
-->
<h1 id="三观">🌌三观</h1>
<h3 id="world-view-放眼寰宇">world view | 放眼寰宇</h3>
<blockquote>
<p>资本主义秩序下的世界无可避免地走到周期的末尾，而第四次工业革命依然前途渺茫，所谓百年未有之大变革，人类文明正走向混沌的路口。</p>
</blockquote>
<h3 id="outlook-on-life-and-value-聚焦个人">outlook on life and value | 聚焦个人：</h3>
<blockquote>
<p>当赛博朋克悄然成为现实，当手机成为不可或缺的器官，当消费主义暴打了理想、蒙骗了爱情，当记录了你的喜怒哀乐的数据比你更值钱；<br>
作为信息时代原住民的我们，作为被资本主义异化、被互联网原子化了的个体，作为在内卷或被内卷中焦虑挣扎的普通人——</p>
</blockquote>
<ul>
<li>是否有勇气走出舒适区，向无处不在的信息茧房说不？</li>
<li>是否愿意审视自我的成见，尝试理解他人？</li>
<li>是否敢于走出自闭，建立真实深刻的社会关系？</li>
<li>是否相信人类意志的成长性，不断逼近生理和心理的极限？</li>
<li>是否敢于自我解构，而不放弃探求生活的真相？</li>
<li>是否接受人生的无意义，并选择继续热爱这一切？</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[友链]]></title>
        <id>https://lonelyuan.github.io/post/friends/</id>
        <link href="https://lonelyuan.github.io/post/friends/">
        </link>
        <updated>2019-01-04T05:20:45.000Z</updated>
        <content type="html"><![CDATA[<p>qq：1139369370<br>
添加友链请联系</p>
]]></content>
    </entry>
</feed>