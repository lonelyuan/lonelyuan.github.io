<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OS on lonelyuan's Blog</title><link>https://lonelyuan.github.io/tags/os/</link><description>Recent content in OS on lonelyuan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 29 Oct 2021 17:03:14 +0000</lastBuildDate><atom:link href="https://lonelyuan.github.io/tags/os/index.xml" rel="self" type="application/rss+xml"/><item><title>MOSPI-ChCore lab (1)</title><link>https://lonelyuan.github.io/p/mospi-chcore-lab-1/</link><pubDate>Fri, 29 Oct 2021 17:03:14 +0000</pubDate><guid>https://lonelyuan.github.io/p/mospi-chcore-lab-1/</guid><description>&lt;p>由于👴觉得👴学校的操作系统讲了个🔨，慕名而来学习上交的 MOSPI 课程。银杏书看完之后👴发现👴学校的OS确实讲了个🔨。我直接当场来一段圣经吟唱：&lt;/p>
&lt;p>那个额西电操作系统嗷，不会写教材可以不写，害特么在弄你那个管程，来我教你啊，看好了啊。首先 M.A.L.H. 原则，看懂了吗，然后开讲&lt;strong>虚拟内存&lt;/strong>，哎我就不虚拟，我就讲那个空闲链表。哎，再扎个&lt;strong>多线程&lt;/strong>，看到没，线程上下文切换了。我特么直接三段&lt;strong>系统调度&lt;/strong>（短期，中期，长期），然后我直接~就一个多核调度，我就调度到&lt;strong>IPC&lt;/strong>，进程现在已经可以通信了啊！别怪我没有教好你，进程通信了之后干什么，憋特么讲你那破几把处理机了。看好啊，讲出锁（嬉皮笑脸），讲出&lt;strong>信号量&lt;/strong>直接就扔到互斥资源身上，就疯狂的进入他的临界区。然后我再一个，&lt;strong>文件系统&lt;/strong>！加三段系统&lt;strong>虚拟化&lt;/strong>（CPU虚拟化、内存虚拟化、IO虚拟化），全部吃满，完成强杀，你唛璧你懂个der，讲寄吧OS，我爱你。&lt;/p>
&lt;p>&lt;em>圣经原文：&lt;/em>&lt;a class="link" href="https://www.bilibili.com/video/BV1Jf4y1L7EZ" target="_blank" rel="noopener"
>拖更云的鹰佐教学&lt;/a>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>本系列为 ChCore lab 实验报告。
Lab源码：https://gitee.com/ipads-lab/chcore-lab
MOSPI在线网站：https://ipads.se.sjtu.edu.cn/mospi/&lt;/p>
&lt;/blockquote>
&lt;h2 id="实验环境">实验环境&lt;/h2>
&lt;p>需要docker和qemu，docker不赘述。linux下安装qemu：
&lt;code>sudo apt-get install qemu-system-arm&lt;/code>
安装完成之后查看版本号：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ qemu-system-aarch64 --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">QEMU emulator version 4.2.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>5个实验在源码仓库分别以5个分支存在。 git clone -b即可。&lt;/p>
&lt;p>内核构建和调试：&lt;/p>
&lt;ul>
&lt;li>用docker交叉编译内核：&lt;code>make build&lt;/code>&lt;/li>
&lt;li>启动qemu：&lt;code>make qemu&lt;/code>
&lt;ul>
&lt;li>这里遇到报错：&lt;code> Unable to init server: Could not connect: Connection refused gtk initialization failed&lt;/code>&lt;/li>
&lt;li>解决方法：修改 Makefile ，在&lt;code>QEMUOPTS&lt;/code>参数后加&lt;code>-nographic&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动qemu：&lt;code>make qemu-gdb&lt;/code>
&lt;ul>
&lt;li>将监听1234端口以供gdb远程调用&lt;/li>
&lt;li>退出：&lt;code>ctrl+a&lt;/code>，然后按x。&lt;/li>
&lt;li>如果意外退出，要杀死进程：&lt;code>kill $(ps -ef | grep qemu | grep 1234 | awk '{print $2}')&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在另一个终端启动gdb调试：&lt;code>make gdb&lt;/code>
&lt;ul>
&lt;li>这里可能需要安装gdb-multiarch：&lt;code>sudo apt-get install gdb-multiarch&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>可以看到，本项目中 Makefile 主要是封装了一些命令。&lt;/p>
&lt;hr>
&lt;h2 id="lab1">Lab1&lt;/h2>
&lt;h3 id="练习3-加载入口定义">练习3-加载入口定义&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">root@lastyear:~/chcore-lab# readelf -S build/kernel.img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">There are &lt;span class="m">9&lt;/span> section headers, starting at offset 0x20cd8:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Section Headers:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span>Nr&lt;span class="o">]&lt;/span> Name Type Address Offset
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Size EntSize Flags Link Info Align
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 0&lt;span class="o">]&lt;/span> NULL &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">00000000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 1&lt;span class="o">]&lt;/span> init PROGBITS &lt;span class="m">0000000000080000&lt;/span> &lt;span class="m">00010000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000000000000b5b0 &lt;span class="m">0000000000000008&lt;/span> WAX &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 2&lt;span class="o">]&lt;/span> .text PROGBITS ffffff000008c000 0001c000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 00000000000011dc &lt;span class="m">0000000000000000&lt;/span> AX &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 3&lt;span class="o">]&lt;/span> .rodata PROGBITS ffffff0000090000 &lt;span class="m">00020000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 00000000000000f8 &lt;span class="m">0000000000000001&lt;/span> AMS &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 4&lt;span class="o">]&lt;/span> .bss NOBITS ffffff0000090100 000200f8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0000000000008000&lt;/span> &lt;span class="m">0000000000000000&lt;/span> WA &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">16&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 5&lt;span class="o">]&lt;/span> .comment PROGBITS &lt;span class="m">0000000000000000&lt;/span> 000200f8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0000000000000032&lt;/span> &lt;span class="m">0000000000000001&lt;/span> MS &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 6&lt;span class="o">]&lt;/span> .symtab SYMTAB &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">00020130&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0000000000000858&lt;/span> &lt;span class="m">0000000000000018&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">46&lt;/span> &lt;span class="m">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 7&lt;span class="o">]&lt;/span> .strtab STRTAB &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">00020988&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000000000000030f &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> 8&lt;span class="o">]&lt;/span> .shstrtab STRTAB &lt;span class="m">0000000000000000&lt;/span> 00020c97
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000000000000003c &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到init段的起始地址是&lt;code>0x80000&lt;/code>，和&lt;code>readelf -h&lt;/code>中的 Entry point address 一致，也和 GDB 刚进入时&lt;code>where&lt;/code>的输出一致。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">0x0000000000080000 in ?? &lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> where
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#0 0x0000000000080000 in _start ()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面寻找&lt;code>_start&lt;/code>的定义，在&lt;code>CMakeLists.txt&lt;/code>中找到&lt;code>_start&lt;/code>，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">set_property&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TARGET kernel.img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> APPEND_STRING
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PROPERTY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LINK_FLAGS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-T &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">CMAKE_CURRENT_BINARY_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">link_script&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> -e _start&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里为&lt;code>kernel.img&lt;/code>指定了链接器脚本(-T)和入口函数(-e)。&lt;/p>
&lt;p>于是跟随link_script：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">set&lt;span class="o">(&lt;/span>link_script &lt;span class="s2">&amp;#34;linker.lds&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">configure_file&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;./scripts/linker-aarch64.lds.in&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;linker.lds.S&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进入脚本linker-aarch64.lds.in：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;../boot/image.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SECTIONS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TEXT_OFFSET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">init&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">init_object&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>init&lt;/code>段指定了加载&lt;code>init_object&lt;/code>，它表示bootloader的所有目标文件集合。其定义回到&lt;code>CmakeLists.txt&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">set&lt;span class="o">(&lt;/span>init_object
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/start.S.o
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/mmu.c.o
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/tools.S.o
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/init_c.c.o
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BINARY_KERNEL_IMG_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BOOTLOADER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/uart.c.o&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可发现&lt;code>/boot/start.S&lt;/code>定义了&lt;code>_start&lt;/code>。&lt;/p>
&lt;p>下面继续寻找地址，在链接器脚本引用了&lt;code>image.h&lt;/code>，其中有&lt;code>TEXT_OFFSET&lt;/code>的定义：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SZ_16K 0x4000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SZ_64K 0x10000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define KERNEL_VADDR 0xffffff0000000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define TEXT_OFFSET 0x80000
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一切终于串起来了：&lt;/p>
&lt;ul>
&lt;li>&lt;code>CMakeLists.txt&lt;/code>：是CMake的脚本文件。 CMake 是跨平台的C/C++建构工具。
&lt;ul>
&lt;li>作用：
&lt;ul>
&lt;li>指定源文件集合&lt;code>init_object&lt;/code>&lt;/li>
&lt;li>定义链接器脚本&lt;code>link_script&lt;/code>&lt;/li>
&lt;li>指定入口函数&lt;code>_start&lt;/code>并指定链接器脚本&lt;/li>
&lt;li>最终生成&lt;code>kernel.img&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>//最近看到的挺好的CMake教程：https://www.bilibili.com/video/BV1rR4y1E7n9&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>linker-aarch64.lds.in&lt;/code>：lds是链接器脚本文件，负责控制输出的ELF文件的细节。
&lt;ul>
&lt;li>作用：指定了起始地址&lt;code>0x80000&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="练习3-多处理器挂起">练习3-多处理器挂起&lt;/h3>
&lt;p>&lt;code>start.S&lt;/code>中注释的很明白了，通过检查&lt;code>mpidr_el1&lt;/code>寄存器来判断 cpuid ，如果不是0则进入死循环。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">BEGIN_FUNC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_start&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mrs&lt;/span> &lt;span class="n">x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mpidr_el1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">and&lt;/span> &lt;span class="n">x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0xFF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cbz&lt;/span> &lt;span class="n">x8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* hang all secondary processors before we intorduce multi-processors */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">secondary_hang&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bl&lt;/span> &lt;span class="n">secondary_hang&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">primary&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Turn to el1 from other exception levels. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bl&lt;/span> &lt;span class="n">arm64_elX_to_el1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Prepare stack pointer and jump to C. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adr&lt;/span> &lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">boot_cpu_stack&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">add&lt;/span> &lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0x1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mov&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bl&lt;/span> &lt;span class="n">init_c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Should never be here */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">END_FUNC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_start&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="练习4-lma和vma">练习4-LMA和VMA&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">root@lastyear:~/chcore-lab# objdump -h build/kernel.img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">build/kernel.img: file format elf64-little
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Sections:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Idx Name Size VMA LMA File off Algn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> init 0000b5b0 &lt;span class="m">0000000000080000&lt;/span> &lt;span class="m">0000000000080000&lt;/span> &lt;span class="m">00010000&lt;/span> 2**12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CONTENTS, ALLOC, LOAD, CODE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> .text 000011dc ffffff000008c000 000000000008c000 0001c000 2**3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CONTENTS, ALLOC, LOAD, READONLY, CODE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">2&lt;/span> .rodata 000000f8 ffffff0000090000 &lt;span class="m">0000000000090000&lt;/span> &lt;span class="m">00020000&lt;/span> 2**3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CONTENTS, ALLOC, LOAD, READONLY, DATA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">3&lt;/span> .bss &lt;span class="m">00008000&lt;/span> ffffff0000090100 &lt;span class="m">0000000000090100&lt;/span> 000200f8 2**4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ALLOC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">4&lt;/span> .comment &lt;span class="m">00000032&lt;/span> &lt;span class="m">0000000000000000&lt;/span> &lt;span class="m">0000000000000000&lt;/span> 000200f8 2**0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CONTENTS, READONLY
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现只有init段的VMA和LMA相同。其赋值还是回到lds脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">SECTIONS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TEXT_OFFSET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">init&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//init段VMA==VMA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">init_object&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SZ_16K&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 对齐16k
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">init_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ABSOLUTE&lt;/span>&lt;span class="p">(.);&lt;/span> &lt;span class="c1">// init段结束
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// KERNEL_VADDR在image.h定义为0xffffff0000000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nl">init_end&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nf">AT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">init_end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// AT指定LMA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="c1">// .text段：VMA = KERNEL_VADDR + init_end; LMA = init_end
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 后面的段，全部按顺序对齐并递增，此时VMA和LMA已经不同，故后面的段也全都不同
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SZ_64K&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">data&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SZ_64K&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">rodata&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">rodata&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_edata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 这些外部变量指的是LMA，则减去虚拟地址头
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_bss_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">bss&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">bss&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_bss_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SZ_64K&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">KERNEL_VADDR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>回答问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>为什么LMA和VMA不同&lt;/p>
&lt;ul>
&lt;li>VMA是对应虚拟内存的地址，但在内核启动时还处于物理地址模式，VMA可能超出物理内存范围。所以只能先加载，再映射到虚拟地址。&lt;/li>
&lt;li>为什么内核段的VMA要映射到高位，应该是一种惯例。&lt;/li>
&lt;li>为什么bootloader不用VMA，因为他负责初始化页表，他不能用，也没有必要。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>LMA到VMA在何时转换&lt;/p>
&lt;ul>
&lt;li>由上一问可知，页表初始化之后便可转换为VMA。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="练习5-c语言进制转换">练习5-c语言进制转换&lt;/h3>
&lt;p>从后往前取余即可。&lt;/p>
&lt;h3 id="练习6-函数栈">练习6-函数栈&lt;/h3>
&lt;p>&lt;code>start.S&lt;/code>中赋值了sp：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> /* Prepare stack pointer and jump to C. */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> adr x0, boot_cpu_stack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add x0, x0, #0x1000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov sp, x0 /* sp = boot_cpu_stack + 0x1000 */
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>boot_cpu_stack&lt;/code>在&lt;code>init.c&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define INIT_STACK_SIZE 0x1000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">boot_cpu_stack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PLAT_CPU_NUMBER&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">INIT_STACK_SIZE&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nf">ALIGN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于&lt;code>PLAT_CPU_NUMBER&lt;/code>被定义为4，故&lt;code>boot_cpu_stack&lt;/code>大小为4*4096，可供四个CPU使用。sp初始化后指向第一个4069，也就是第一个cpu内核栈的最高位。初始化时，fp=sp。&lt;/p>
&lt;p>但这是bootloader的栈。后续进入内核后，会重新分配内核栈，参见&lt;code>head.S&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">BEGIN_FUNC(start_kernel)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov x3, #0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> msr TPIDR_EL1, x3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ldr x2, =kernel_stack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add x2, x2, KERNEL_STACK_SIZE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov sp, x2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">END_FUNC(start_kernel)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>于是内核栈的定义在start_kernel函数。&lt;/p>
&lt;p>有关内核栈的位置，因为kernel_stack是全局数组，且未初始化，因而位于.bss。同时没有其他未初始化变量，因此首地址在&lt;code>.bss + KERNEL_STACK_SIZE&lt;/code>。&lt;/p>
&lt;p>通过readelf得到.bss的VMA为0xffffff0000090100，KERNEL_STACK_SIZE为0x2000，进入gdb调试可以验证&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gef➤ x/g $sp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff0000092100 &amp;lt;kernel_stack+8192&amp;gt;: 0x0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="练习7-调用惯例">练习7-调用惯例&lt;/h3>
&lt;p>先看stack_test函数。这里gdb安装了gef插件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gef➤ b stack_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Breakpoint 1 at 0xffffff000008c020
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gef➤ disas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Dump of assembler code for function stack_test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=&amp;gt; 0xffffff000008c020 &amp;lt;+0&amp;gt;: stp x29, x30, [sp, #-32]! /* FP、LR 入栈 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c024 &amp;lt;+4&amp;gt;: mov x29, sp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c028 &amp;lt;+8&amp;gt;: str x19, [sp, #16] /* x 入栈 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c02c &amp;lt;+12&amp;gt;: mov x19, x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c030 &amp;lt;+16&amp;gt;: mov x1, x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c034 &amp;lt;+20&amp;gt;: adrp x0, 0xffffff0000090000 # 计算偏移
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c038 &amp;lt;+24&amp;gt;: add x0, x0, #0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c03c &amp;lt;+28&amp;gt;: bl 0xffffff000008c620 &amp;lt;printk&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c040 &amp;lt;+32&amp;gt;: cmp x19, #0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c044 &amp;lt;+36&amp;gt;: b.gt 0xffffff000008c068 &amp;lt;stack_test+72&amp;gt; # greater than /* 递归 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c048 &amp;lt;+40&amp;gt;: bl 0xffffff000008c0dc &amp;lt;stack_backtrace&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c04c &amp;lt;+44&amp;gt;: mov x1, x19
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c050 &amp;lt;+48&amp;gt;: adrp x0, 0xffffff0000090000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c054 &amp;lt;+52&amp;gt;: add x0, x0, #0x20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c058 &amp;lt;+56&amp;gt;: bl 0xffffff000008c620 &amp;lt;printk&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c05c &amp;lt;+60&amp;gt;: ldr x19, [sp, #16] # x19 = sp + 16 /* x 出栈 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c060 &amp;lt;+64&amp;gt;: ldp x29, x30, [sp], #32 # load pair /* FP、LR 出栈 */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c064 &amp;lt;+68&amp;gt;: ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c068 &amp;lt;+72&amp;gt;: sub x0, x19, #0x1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c06c &amp;lt;+76&amp;gt;: bl 0xffffff000008c020 &amp;lt;stack_test&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c070 &amp;lt;+80&amp;gt;: mov x1, x19
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c074 &amp;lt;+84&amp;gt;: adrp x0, 0xffffff0000090000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c078 &amp;lt;+88&amp;gt;: add x0, x0, #0x20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c07c &amp;lt;+92&amp;gt;: bl 0xffffff000008c620 &amp;lt;printk&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c080 &amp;lt;+96&amp;gt;: ldr x19, [sp, #16]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c084 &amp;lt;+100&amp;gt;: ldp x29, x30, [sp], #32
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0xffffff000008c088 &amp;lt;+104&amp;gt;: ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of assembler dump.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行，观察栈的变化，这里省略部分输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gef➤ c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────── registers ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x0 : 0x0000000000000005 # 这一层函数的输入值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x19 : 0x0000000000000000 # 上一层函数的返回值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x29 : 0xffffff00000920f0 # FP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x30 : 0xffffff000008c0d4 → &amp;lt;main+72&amp;gt; # LR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$sp : 0xffffff00000920f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────────── stack ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f0│+0x0000: 0x0000000000000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f8│+0x0008: 0xffffff000008c018 # 栈头，可能是栈初始化的数据结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">──────────────────────────────────────────── trace ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#0] 0xffffff000008c020 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#1] 0xffffff000008c0d4 → main()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────────────────────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gef➤ c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────── registers ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x0 : 0x0000000000000004
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x19 : 0x0000000000000005
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x29 : 0xffffff00000920d0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x30 : 0xffffff000008c070 #→ &amp;lt;stack_test+80&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$sp : 0xffffff00000920d0 → 0xffffff00000920f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────────── stack ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920d0│+0x0000: 0xffffff00000920f0 ─┐ # FP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920d8│+0x0008: 0xffffff000008c0d4 │ # LR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920e0│+0x0010: 0x0000000000000000 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920e8│+0x0018: 0x00000000ffffffc0 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f0│+0x0020: 0x0000000000000000 ◄┘
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f8│+0x0028: 0xffffff000008c018
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────────── trace ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#0] 0xffffff000008c020 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#1] 0xffffff000008c070 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#2] 0xffffff000008c0d4 → main()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">────────────────────────────────────────────────────────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gef➤ c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">───────────────────────────────────────── registers ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x0 : 0x0000000000000003
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x19 : 0x0000000000000004
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x29 : 0xffffff00000920b0 → 0xffffff00000920d0 → 0xffffff00000920f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$x30 : 0xffffff000008c070
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$sp : 0xffffff00000920b0 → 0xffffff00000920d0 → 0xffffff00000920f0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">──────────────────────────────────────────── stack ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920b0│+0x0000: 0xffffff00000920d0 ─┐ # [#1]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920b8│+0x0008: 0xffffff000008c070 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920c0│+0x0010: 0x0000000000000005 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920c8│+0x0018: 0x00000000ffffffc0 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920d0│+0x0020: 0xffffff00000920f0 ◄┘ # [#2]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920d8│+0x0028: 0xffffff000008c0d4 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920e0│+0x0010: 0x0000000000000000 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920e8│+0x0018: 0x00000000ffffffc0 │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f0│+0x0020: 0x0000000000000000 ◄┘ # [#3]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xffffff00000920f8│+0x0028: 0xffffff000008c018
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">─────────────────────────────────────────── trace ────
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#0] 0xffffff000008c020 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#1] 0xffffff000008c070 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#2] 0xffffff000008c070 → stack_test()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[#3] 0xffffff000008c0d4 → main()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">──────────────────────────────────────────────────────
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到每次递归调用压栈4个64位字，分别是：上一层FP，LR，参数x和0x00000000ffffffc0。最后一个64位字用途未知。&lt;/p>
&lt;h3 id="练习9-backtrace">练习9-backtrace&lt;/h3>
&lt;p>提供&lt;code>read_fp()&lt;/code>接口，我们知道fp永远指向父函数的fp，故递归调用即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u64&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">u64&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">u64&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">read_fp&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 双层指针，因为第一层是本函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;LR %lx FP %lx Args %d %d %d %d %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">fp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//为什么5个参数是fp-2到fp+2？样例只包括一个参数，只要出现fp+2就能测试通过
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">u64&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//下一层
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>满分通过，懒得贴图了。&lt;/p>
&lt;hr>
&lt;p>看到大佬写的，瞬间不想写了，寄。
&lt;a class="link" href="https://www.cnblogs.com/kangyupl/p/chcore_lab1.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/kangyupl/p/chcore_lab1.html&lt;/a>&lt;/p></description></item></channel></rss>